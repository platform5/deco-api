{"version":3,"file":"operation.model.js","sourceRoot":"","sources":["../../../src/modules/operation/operation.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppModel } from './../app/app.model';\nimport { model, Model, type, io, query, validate, ObjectId, mongo } from '../../';\nimport { Request, Response, NextFunction } from 'express';\nimport moment from 'moment';\nimport events from 'events';\nlet debug = require('debug')('app:models:dico');\nlet emmiter = new events.EventEmitter();\n\ntype Status = 'pending' | 'in-progress' | 'completed' | 'errored';\n\n@model('operation')\nexport class Operation extends Model {\n  @type.model({model: AppModel})\n  @io.toDocument\n  @query.filterable({type: 'auto'})\n  @validate.required\n  @mongo.index({type: 'single'})\n  public appId: ObjectId | null = null;\n\n  @type.select({options: ['pending', 'in-progress', 'completed', 'errored']})\n  @io.toDocument\n  @io.output\n  @query.filterable({type: 'auto'})\n  @validate.required\n  public status: Status;\n\n  @type.string\n  @io.toDocument\n  @io.output\n  public message: string;\n\n  @type.date\n  @io.toDocument\n  @io.output\n  public startedAt: Date;\n\n  @type.integer\n  @io.toDocument\n  @io.output\n  public duration: number;\n\n  static create(appId: ObjectId, status: Status, startedAt?: Date): Promise<Operation> {\n    let operation = new Operation();\n    operation.appId = appId;\n    operation.status = status;\n    operation.startedAt = startedAt || moment().toDate();\n    return operation.insert();\n  }\n\n  static start(appId: ObjectId, operationId?: string | ObjectId): Promise<Operation> {\n    if (!operationId) {\n      return Operation.create(appId, 'in-progress');\n    }\n    return Operation.getOneWithId(operationId).then((operation) => {\n      if (!operation) throw new Error('Operation not found');\n      operation.status = 'in-progress';\n      return operation.update(['status']);\n    });\n  }\n\n  static complete(operationId: string | ObjectId, message?: string): Promise<Operation> {\n    return Operation.getOneWithId(operationId).then((operation) => {\n      if (!operation) throw new Error('Operation not found');\n      operation.status = 'completed';\n      operation.message = message || '';\n      return operation.update(['status', 'message']);\n    }).then((operation) => {\n      emmiter.emit('completed', operation);\n      return operation;\n    });\n  }\n\n  static errored(operationId: string | ObjectId, message?: string): Promise<Operation> {\n    return Operation.getOneWithId(operationId).then((operation) => {\n      if (!operation) throw new Error('Operation not found');\n      operation.status = 'errored';\n      operation.message = message || '';\n      return operation.update(['status', 'message']);\n    }).then((operation) => {\n      emmiter.emit('completed', operation);\n      return operation;\n    });\n  }\n\n  static startMiddelware(req: Request, res: Response, next: NextFunction) {\n    if (!res.locals.app) {\n      next(new Error('Missing app'));\n      return;\n    }\n    const app = res.locals.app as AppModel;\n    const rightInstance = app instanceof AppModel;\n    if (!rightInstance) {\n      next(new Error('Invalid app'));\n      return;\n    }\n    Operation.start(app._id).then((operation) => {\n      res.locals.currentOperation = operation;\n      next();\n    }).catch(next);\n  }\n\n  static completeCurrentOperation(res: Response, status: 'completed' | 'errored', message?: string): Promise<Operation> {\n    if (!res.locals.currentOperation) {\n      throw new Error('No currentOperation found');\n    }\n    const operation = res.locals.currentOperation as Operation;\n    const rightInstance = operation instanceof Operation;\n    if (!rightInstance) {\n      throw new Error('Invalid currentOperation');\n    }\n    if (status === 'completed') {\n      return Operation.complete(operation._id, message);\n    } else {\n      return Operation.errored(operation._id, message);\n    }\n  }\n\n  static sendCurrentOperation(req: Request, res: Response, next: NextFunction) {\n    if (!res.locals.currentOperation) {\n      next(new Error('No currentOperation found'));\n      return;\n    }\n    const operation = res.locals.currentOperation as Operation;\n    const rightInstance = res.locals.currentOperation instanceof Operation;\n    if (!rightInstance) {\n      next(new Error('Invalid currentOperation'));\n      return;\n    }\n    operation.output().then((element) => {\n      res.send(element);\n    }).catch(next);\n  }\n\n  static waitForCompletion(req: Request, res: Response, next: NextFunction) {\n    const operationId = req.params.operationId;\n    if (!operationId) {\n      next(new Error('Missing operationId'));\n      return;\n    }\n    let sent = false;\n    const send = (operation: Operation) => {\n      if (sent) return;\n      sent = true;\n      if (operation instanceof Operation) {\n        operation.output().then((element) => {\n          res.send(element);\n        });\n      } else {\n        next(new Error('Invalid operation completion'));\n      }\n    }\n    Operation.getOneWithId(operationId).then((operation) => {\n      if (!operation) throw new Error('Operation not found');\n      if (operation.status === 'completed' || operation.status === 'errored') {\n        send(operation);\n      } else {\n        let sent = false;\n        emmiter.once('completed', (operation: Operation) => {\n          if (!sent) {\n            send(operation);\n            sent = true;\n          }\n        });\n        setTimeout(() => {\n          Operation.getOneWithId(operationId).then((operation) => {\n            if (!sent && operation) {\n              send(operation);\n              sent = true;\n            }\n          });\n        }, 20000);\n      }\n    }).catch(next);\n  }\n}"]}