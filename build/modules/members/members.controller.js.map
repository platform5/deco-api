{"version":3,"file":"members.controller.js","sourceRoot":"","sources":["../../../src/modules/members/members.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthMiddleware } from './../user/auth.middleware';\nimport { UserModel } from './../user/user.model';\nimport { ObjectId, PolicyFactory, Policy } from '../../';\nimport { Request, Response, NextFunction } from \"express\";\nimport { Members } from './members.abstract';\n\nexport class MembersController {\n  private static async validateUserIdAndRoles(req: Request, instance: Members, validateRoles: boolean = true): Promise<UserModel> {\n    let userId: ObjectId;\n    if (!req.params.userId) {\n      throw new Error('Missing userId');\n    }\n    try {\n      userId = new ObjectId(req.params.userId);\n    } catch (error) {\n      throw new Error('Invalid userId');\n    }\n    if (validateRoles) {\n      if (!req.body.roles) {\n        throw new Error('Missing roles');\n      }\n      if (!Array.isArray(req.body.roles)) {\n        throw new Error('Invalid roles');\n      }\n      req.body.roles.map((i: any) => {\n        if (typeof i !== 'string') throw new Error('Invalid roles');\n        if (i !== instance.superAdminRole && !instance.roles[i]) throw new Error('Invalid roles');\n      });\n    }\n    const user = await UserModel.getOneWithQuery({appId: instance.appId, _id: userId});\n    if (!user) {\n      throw new Error('User not found');\n    }\n    return user;\n  }\n\n  private static getInstance(res: Response, localsProperty: string): Members | null {\n    if (!res.locals[localsProperty]) {\n      return null;\n    }\n    const rightInstance = res.locals[localsProperty] instanceof Members;\n    if (!rightInstance) {\n      res.locals.userAction = [];\n      return null;\n    }\n    return res.locals[localsProperty] as Members;\n  }\n\n  \n  // exemple:  GET /shop/admin/:shopId/members\n  public static getMembersController(localsProperty: string, send: boolean = true) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const instance = MembersController.getInstance(res, localsProperty);\n      if (instance === null) {\n        throw new Error('Invalid request');\n      }\n\n      res.send({\n        members: instance.members,\n        roles: instance.roles,\n        superAdminRole: instance.superAdminRole,\n        actions: instance.actions()\n      });\n    }\n  }\n\n  // exemple:  POST /shop/admin/:shopId/members/:userId (with req.body.roles as Array<string>)\n  public static addMemberController(localsProperty: string, send: boolean = true) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const instance = MembersController.getInstance(res, localsProperty);\n      if (instance === null) {\n        throw new Error('Invalid request');\n      }\n      new Promise(async (resolve, reject) => {\n        try {\n          const user = await MembersController.validateUserIdAndRoles(req, instance);\n          for (let member of instance.members) {\n            if (member.userId.toHexString() === req.params.userId) {\n              throw new Error('This user is already a member, please use a PUT request')\n            }\n          }\n          instance.members.push({\n            userId: user._id,\n            roles: req.body.roles\n          });\n          await instance.update(['members']);\n          resolve(null);\n        } catch (error) {\n          reject(error);\n        }\n      }).then(() => {\n        if (send) {\n          res.send(instance.members);\n        } else {\n          res.locals.element = instance;\n          next();\n        }\n      }).catch(next);\n    }\n  }\n\n  // exemple:  PUT /shop/admin/:shopId/members/:userId (with req.body.roles as Array<string>)\n  public static editMemberController(localsProperty: string, send: boolean = true) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const instance = MembersController.getInstance(res, localsProperty);\n      if (instance === null) {\n        throw new Error('Invalid request');\n      }\n      new Promise(async (resolve, reject) => {\n        try {\n          await MembersController.validateUserIdAndRoles(req, instance);\n          let index = -1;\n          for (let key in instance.members) {\n            const member = instance.members[key];\n            if (member.userId.toHexString() === req.params.userId) {\n              index = parseInt(key, 10);\n              break;\n            }\n          }\n          if (index === -1) {\n            throw new Error('This user is not yet a member, please use a POST request');\n          }\n          instance.members[index].roles = req.body.roles;\n          let atLeaseOneSuperAdminLeft = false;\n          for (let member of instance.members) {\n            if (member.roles.indexOf(instance.superAdminRole) !== -1) {\n              atLeaseOneSuperAdminLeft = true;\n              break;\n            }\n          }\n          if (!atLeaseOneSuperAdminLeft) {\n            throw new Error('Operation not permitted: you must always keep at least one ' + instance.superAdminRole + ' role');\n          }\n          await instance.update(['members']);\n          resolve(null);\n        } catch (error) {\n          reject(error);\n        }\n      }).then(() => {\n        if (send) {\n          res.send(instance.members);\n        } else {\n          res.locals.element = instance;\n          next();\n        }\n      }).catch(next);\n    }\n  }\n\n  // exemple:  DELETE /shop/admin/:shopId/members/:userId\n  public static removeMemberController(localsProperty: string, send: boolean = true) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const instance = MembersController.getInstance(res, localsProperty);\n      if (instance === null) {\n        throw new Error('Invalid request');\n      }\n      new Promise(async (resolve, reject) => {\n        try {\n          await MembersController.validateUserIdAndRoles(req, instance, false);\n          let index = -1;\n          for (let key in instance.members) {\n            const member = instance.members[key];\n            if (member.userId.toHexString() === req.params.userId) {\n              index = parseInt(key, 10);\n              break;\n            }\n          }\n          if (index !== -1) {\n            instance.members.splice(index, 1);\n            let atLeaseOneSuperAdminLeft = false;\n            for (let member of instance.members) {\n              if (member.roles.indexOf(instance.superAdminRole) !== -1) {\n                atLeaseOneSuperAdminLeft = true;\n                break;\n              }\n            }\n            if (!atLeaseOneSuperAdminLeft) {\n              throw new Error('Operation not permitted: you must always keep at least one ' + instance.superAdminRole + ' role');\n            }\n          }\n          await instance.update(['members']);\n          resolve(null);\n        } catch (error) {\n          reject(error);\n        }\n      }).then(() => {\n        if (send) {\n          res.send(instance.members);\n        } else {\n          res.locals.element = instance;\n          next();\n        }\n      }).catch(next);\n    }\n  }\n\n  private static validateRoles(req: Request, instance: Members) {\n    if (!req.params.role) {\n      throw new Error('Missing role');\n    }\n    if (req.params.role === instance.superAdminRole) {\n      throw new Error('Operation not permitted, role ' + req.params.role + ' is protected');\n    }\n    if (!req.body.actions) {\n      throw new Error('Missing actions');\n    }\n    if (!Array.isArray(req.body.actions)) {\n      throw new Error('Invalid actions');\n    }\n    req.body.actions.map((i: any) => {\n      if (typeof i !== 'string') throw new Error('Invalid actions');\n      if (instance.actions().indexOf(i) === -1) throw new Error('Invalid actions');\n    });\n  }\n\n  // exemple:  POST /shop/admin/:shopId/members/:userId (with req.body.roles as Array<string>)\n  public static addRoleController(localsProperty: string, send: boolean = true) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const instance = MembersController.getInstance(res, localsProperty);\n      if (instance === null) {\n        throw new Error('Invalid request');\n      }\n      new Promise(async (resolve, reject) => {\n        try {\n          MembersController.validateRoles(req, instance);\n          if (instance.roles[req.params.role]) {\n            throw new Error('This role already exists, please use a PUT request')\n          }\n          instance.roles[req.params.role] = req.body.actions;\n          await instance.update(['roles']);\n          resolve(null);\n        } catch (error) {\n          return reject(error);\n        }\n      }).then(() => {\n        if (send) {\n          res.send(instance.roles);\n        } else {\n          res.locals.element = instance;\n          next();\n        }\n      }).catch(next);\n    }\n  }\n\n  // exemple:  PUT /shop/admin/:shopId/members/:userId (with req.body.roles as Array<string>)\n  public static editRoleController(localsProperty: string, send: boolean = true) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const instance = MembersController.getInstance(res, localsProperty);\n      if (instance === null) {\n        throw new Error('Invalid request');\n      }\n      new Promise(async (resolve, reject) => {\n        try {\n          MembersController.validateRoles(req, instance);\n          if (!instance.roles[req.params.role]) {\n            throw new Error('This role do not already exists, please use a POST request')\n          }\n          instance.roles[req.params.role] = req.body.actions;\n          await instance.update(['roles']);\n          resolve(null);\n        } catch (error) {\n          reject(error);\n        }\n      }).then(() => {\n        if (send) {\n          res.send(instance.roles);\n        } else {\n          res.locals.element = instance;\n          next();\n        }\n      }).catch(next);\n    }\n  }\n\n  // exemple:  DELETE /shop/admin/:shopId/members/:userId\n  public static removeRoleController(localsProperty: string, send: boolean = true) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const instance = MembersController.getInstance(res, localsProperty);\n      if (instance === null) {\n        throw new Error('Invalid request');\n      }\n      new Promise(async (resolve, reject) => {\n        try {\n          if (!instance.roles[req.params.role]) {\n            throw new Error('This role do not exists');\n          }\n          delete instance.roles[req.params.role];\n          await instance.update(['roles']);\n          resolve(null);\n        } catch (error) {\n          reject(error);\n        }\n      }).then(() => {\n        if (send) {\n          res.send(instance.roles);\n        } else {\n          res.locals.element = instance;\n          next();\n        }\n      }).catch(next);\n    }\n  }\n\n  public static fetchUserActions(localsProperty: string, addPolicyForActions?: Array<string>) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const instance = MembersController.getInstance(res, localsProperty);\n      if (Array.isArray(addPolicyForActions)) {\n        if (!res.locals.policy) {\n          res.locals.policy = new Policy();\n        }\n        const policy: Policy = res.locals.policy;\n        policy.extend(PolicyFactory.memberCanDoAction(addPolicyForActions));\n      }\n      if (instance === null) {\n        res.locals.userAction = [];\n        return next();\n      }\n      new Promise(async (resolve, reject) => {\n        try {\n          if (!res.locals.user) {\n            await AuthMiddleware.tryToAuthenticate(req, res);\n          }\n          if (!res.locals.user) {\n            res.locals.userAction = [];\n            return resolve(null);\n          }\n          const user = res.locals.user as UserModel;\n          const userIdString = user._id.toHexString();\n          let roles: Array<string> = [];\n          for (let member of instance.members) {\n            if (member.userId.toHexString() === userIdString) {\n              roles = member.roles;\n              break;\n            }\n          }\n          if (roles.indexOf(instance.superAdminRole) !== -1) {\n            res.locals.actions = instance.actions();\n          } else {\n            res.locals.actions = roles.reduce((actions, role) => {\n              const newActions = instance.roles[role] || [];\n              newActions.map((action) => {\n                if (actions.indexOf(action) === -1) actions.push(action);\n              });\n              return actions;\n            }, [] as string[]);\n          }\n          resolve(null);\n        } catch (error) {\n          reject(error)\n        }\n      }).then(() => {\n        next();\n      }).catch(next);\n    } \n  }\n}"]}