{"version":3,"file":"members.abstract.js","sourceRoot":"","sources":["../../../src/modules/members/members.abstract.ts"],"names":[],"mappings":"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","sourcesContent":["import { Model, ObjectId, UpdateQuery, InstanceFromDocumentOptions } from '../../';\nimport { Request, Response, NextFunction } from \"express\";\nimport { MembersController } from './members.controller';\n\n\nexport abstract class Members extends Model {\n\n  public appId: ObjectId;\n\n  public superAdminRole: string = 'manager';\n\n  // DO NOT DECORATE\n  // Decoarting the property in the base class can corrupt the inherited classes\n  // Please use the model_types property in type-decorator.ts to set the main class type properties\n  public roles: {[key: string]: Array<string>} = {};\n\n  // DO NOT DECORATE\n  // Decoarting the property in the base class can corrupt the inherited classes\n  // Please use the model_types property in type-decorator.ts to set the main class type properties\n  public members: Array<{userId: ObjectId, roles: Array<string>}> = [];\n\n  public actions(): Array<string> {\n    return [];\n  }\n\n  public toDocument(operation: 'insert' | 'update' | 'upsert', properties: Array<string> = []): Promise<UpdateQuery> {    \n    return super.toDocument(operation, properties).then((query) => {\n      if (!this.members || this.members.length === 0) {\n        if (!this.response.locals.user) {\n          throw new Error('Access denied');\n        }\n        const members = [{\n          userId: this.response.locals.user._id,\n          roles: [this.superAdminRole]\n        }];\n        query.set('members', members);\n      } else {\n        query.set('members', this.members);\n      }\n      query.set('roles', this.roles);\n      return query;\n    });\n  }\n\n  static instanceFromDocument<T extends typeof Model>(document: any, options: InstanceFromDocumentOptions = {keepCopyOriginalValues: false}): Promise<InstanceType<T>> {\n    return super.instanceFromDocument(document, options).then((instance) => {\n      instance.set('members', document.members);\n      instance.set('roles', document.roles);\n      return instance as InstanceType<T>;\n    });\n  }\n\n  public static fetchUserActionsWithElementId(this: typeof Model, addPolicyForActions?: Array<string>) {\n    return (req: Request, res: Response, next: NextFunction) => {\n      if (!req.params.elementId) {\n        res.locals.userAction = [];\n        return next();\n      }\n      new Promise(async (resolve, reject) => {\n        try {\n          const instance = await this.getOneWithId(req.params.elementId);\n          res.locals.instance = instance;\n          resolve(null);\n        } catch (error) {\n          reject(error)\n        }\n      }).catch(next).then(() => {\n        MembersController.fetchUserActions('instance', addPolicyForActions)(req, res, next);\n      });\n    } \n  }\n\n  \n}"]}