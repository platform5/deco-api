{"version":3,"file":"access-token.model.js","sourceRoot":"","sources":["../../../src/modules/user/access-token.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserModel } from './user.model';\nimport { AppModel } from './../app/app.model';\nimport { model, Model, type, io, validate, ObjectId } from '../../';\nimport crypto from 'crypto';\nimport moment from 'moment';\nlet debug = require('debug')('app:models:access-tokens');\n\n@model('accessTokens')\nexport class AccessTokenModel extends Model {\n\n  @type.model({model: AppModel})\n  @io.toDocument\n  @validate.required\n  public appId: ObjectId | null = null;\n\n  @type.select({options: ['access', 'double-auth']})\n  @io.toDocument\n  @io.output\n  @validate.required\n  public type: string = 'access';\n\n  @type.string\n  @io.toDocument\n  @io.output\n  @validate.required\n  public token: string = '';\n\n  @type.string\n  @io.toDocument\n  @io.output\n  public refresh?: string = '';\n\n  @type.string\n  @io.toDocument\n  public code: string = '';\n\n  @type.date({dateFormat: 'YYYY-MM-DDTHH:mm:ss[Z]'})\n  @io.toDocument\n  @io.output\n  @validate.required\n  public expires: Date = new Date();\n\n  @type.model({model: UserModel})\n  @io.toDocument\n  @validate.required\n  public userId: ObjectId | null = null;\n\n  constructor() {\n    super();\n    this.model = AccessTokenModel;\n  }\n\n  init(type: 'access' | 'double-auth', userId: ObjectId, appId: ObjectId,  validity: number = 2, validityUnit: 'hours' | 'minutes' | 'days' | 'weeks' = 'weeks') {\n    //super();\n    this.type = type;\n    this.userId = userId;\n    this.appId = appId;\n    let len = 32;\n    this.token = crypto.randomBytes(Math.ceil(len / 2)).toString('hex').slice(0, len);\n    if (this.type === 'access') this.refresh = crypto.randomBytes(Math.ceil(len / 2)).toString('hex').slice(0, len);\n    if (this.type === 'double-auth') this.code = crypto.randomBytes(Math.ceil(6 / 2)).toString('hex').slice(0, 6);\n    this.expires = moment().add(validity, validityUnit).toDate();\n  }\n\n  output(): Promise<any> {\n    let validity = moment(this.expires).diff(moment(), 'seconds');\n    return super.output().then((element: any) => {\n      element.validity = validity;\n      return element;\n    });\n  }\n}"]}