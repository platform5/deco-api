{"version":3,"file":"policy.factory.js","sourceRoot":"","sources":["../../../../src/modules/user/policy/policy.factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {  Policy, PolicyRule, PolicyCondition } from './policy.model';\nlet debug = require('debug')('app:controller:policy:factory');\n\nexport class PolicyFactory  {\n\n  static authenticate() {\n    return new Policy({\n      route: [\n        {\n          conditions: {\n            key: {\n              type: 'property',\n              propertySource: 'res.locals',\n              pointer: 'user'\n            },          \n            operation: 'exists'\n          }\n        }\n      ]\n    });\n  }\n\n  static paramMustExist(param: string) {\n    return new Policy({\n      route: [\n        {\n          conditions: {\n            key: {\n              type: 'property',\n              propertySource: 'req.params',\n              pointer: param\n            },          \n            operation: 'exists'\n          }\n        }\n      ]\n    });\n  }\n\n  static localsMustExist(param: string) {\n    return new Policy({\n      route: [\n        {\n          conditions: {\n            key: {\n              type: 'property',\n              propertySource: 'res.locals',\n              pointer: param\n            },          \n            operation: 'exists'\n          }\n        }\n      ]\n    });\n  }\n\n  static keyMustEqual(key: string, source: 'res.locals', pointer: string) {\n    const policy = new Policy();\n    if (source === 'res.locals') {\n      policy.extend(PolicyFactory.localsMustExist(pointer));\n    }\n    policy.extend(new Policy({\n      access: [{\n        conditions: {\n          key: key,\n          operation: 'equals',\n          value: {\n            type: 'property',\n            propertySource: source,\n            pointer: pointer\n          }\n        }\n      }]\n    }));\n    return policy;\n  }\n\n  static appId() {\n    return PolicyFactory.keyMustEqual('appId', 'res.locals', 'app._id');\n  }\n\n  static shopId() {\n    return PolicyFactory.keyMustEqual('shopId', 'res.locals', 'shop._id');\n  }\n\n  static appKeyMustBeEqualsTo(key: string, value: any) {\n    return new Policy({\n      route: [\n        {\n          conditions: {\n            key: {\n              type: 'property',\n              propertySource: 'res.locals',\n              pointer: 'app.' + key\n            },          \n            operation: 'equals',\n            value: value\n          }\n        }\n      ]\n    })\n  }\n\n  static owner() {\n    return new Policy({\n      access: [\n        {\n          conditions: {\n            key: '_createdBy', \n            operation: 'equals',\n            value: {\n              type: 'property',\n              propertySource: 'res.locals',\n              pointer: 'user._id'\n            }\n          }\n        }\n      ]\n    });\n  }\n\n  static userRole(roles: string | Array<string>, operation: 'include' | 'exclude' = 'include') {\n    if (!Array.isArray(roles)) { roles = [roles]};\n    return new Policy({\n      route: [\n        {\n          conditions: [\n            {\n              key: {\n                type: 'property',\n                propertySource: 'res.locals',\n                pointer: 'user'\n              },          \n              operation: 'exists'\n            },\n            {\n              key: {\n                type: 'property',\n                propertySource: 'res.locals',\n                pointer: 'user.roles'\n              }, \n              operation: operation,\n              value: roles\n            }\n          ] \n        }\n      ]\n    });\n  }\n\n  public static memberCanDoAction(actions: Array<string>) {\n    const policyRule: PolicyRule = {\n      conditionsOperator: 'or',\n      conditions: []\n    };\n    for (let action of actions) {\n      const condition: PolicyCondition = {\n        key: {\n          type: 'property',\n          propertySource: 'res.locals',\n          pointer: 'actions'\n        },\n        operation: 'include',\n        value: action\n      };\n      (policyRule.conditions as Array<PolicyCondition>).push(condition);\n    }\n    return new Policy({\n      route: [\n        policyRule\n      ]\n    });\n  }\n\n  public static userMustBeMember() {\n    return PolicyFactory.keyMustEqual('members.userId', 'res.locals', 'user._id');\n  }\n\n  public static projectMember(role: 'reader' | 'member' | 'manager') {\n    let roles: Array<'reader'|'member'|'manager'> = ['manager'];\n    if (role === 'member' || role === 'reader') {\n      roles.push('member');\n    }\n    if (role === 'reader') {\n      roles.push('reader');\n    }\n    return PolicyFactory.authenticate().extend({\n      route: [\n        {\n          conditions: {\n            key: {\n              type: 'query',\n              queryModel: 'Step',\n              queryType: 'one',\n              query: {members: {$elemMatch: {userId: '$res.locals.user._id', role: {$in: roles}}}, _id: '$req.params.projectId'},\n              pointer: '_id'\n            },          \n            operation: 'exists'\n          }\n        }\n      ]\n    });\n  }\n\n  static apiKey() {\n\n    const expires = [\n      { expires: null },\n      { expires: {$exists: false}},\n      { expires: {$gt: \"$now\"}}\n    ];\n\n    return new Policy({\n      route: [\n        {\n          conditions: {\n            key: {\n              type: 'query',\n              queryModel: 'App',\n              queryType: 'one',\n              query: {'publicKeys': {$elemMatch: {key: '$req.query.apiKey', active: true, $or: expires}}},\n              pointer: '_id'\n            },\n            operation: 'exists'\n          }\n        }\n      ]\n    });\n  }\n}"]}