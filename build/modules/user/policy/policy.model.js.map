{"version":3,"file":"policy.model.js","sourceRoot":"","sources":["../../../../src/modules/user/policy/policy.model.ts"],"names":[],"mappings":";;AAEA,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,6BAA6B,CAAC,CAAC;AAc5D,MAAa,MAAM;IASjB,YAAY,OAAwB,EAAE;QACpC,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;YACnB,IAAY,CAAC,GAAG,CAAC,GAAI,IAAY,CAAC,GAAG,CAAC,CAAC;SACzC;IACH,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAEM,OAAO,CAAC,GAAG,MAAuC;QACvD,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACpB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,MAAM,CAAC,IAA8B;QAC1C,IAAI,IAAI,YAAY,MAAM,EAAE;YAC1B,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;aACtE;YACD,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;aAC3E;YACD,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;aAC1F;YACD,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;aACtE;YACD,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;aAC3E;YACD,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;aAC1F;SACF;aAAM;YACL,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACrB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AApDD,wBAoDC","sourcesContent":["import { ObjectId, Model } from '../../../';\n\nlet debug = require('debug')('app:controller:policy:model');\n\nexport type CrudOperation = 'create' | 'read' | 'update' | 'delete';\nexport type Operations = CrudOperation;\n\nexport interface PolicyInterface {\n  route?: Array<PolicyRule>;\n  access?: Array<PolicyRule>;\n  operation?: Array<PolicyRule>;\n  input?: Array<PolicyRule>;\n  output?: Array<PolicyRule>;\n  autoFetch?: Array<PolicyRule>;\n}\n\nexport class Policy implements PolicyInterface {\n\n  route?: Array<PolicyRule>;\n  access?: Array<PolicyRule>;\n  operation?: Array<PolicyRule>;\n  input?: Array<PolicyRule>;\n  output?: Array<PolicyRule>;\n  autoFetch?: Array<PolicyRule>;\n  \n  constructor(data: PolicyInterface = {}) {\n    for (let key in data) {\n      (this as any)[key] = (data as any)[key];\n    }\n  }\n\n  public clone() {\n    return new Policy(JSON.parse(JSON.stringify(this)));\n  }\n\n  public combine(...params: Array<PolicyInterface | Policy>) {\n    for (let param of params) {\n      this.extend(param);\n    }\n    return this;\n  }\n\n  public extend(data: Policy | PolicyInterface) {\n    if (data instanceof Policy) {\n      if (data.route) {\n        this.route = this.route ? this.route.concat(data.route) : data.route;\n      }\n      if (data.access) {\n        this.access = this.access ? this.access.concat(data.access) : data.access;\n      }\n      if (data.operation) {\n        this.operation = this.operation ? this.operation.concat(data.operation) : data.operation;\n      }\n      if (data.input) {\n        this.input = this.input ? this.input.concat(data.input) : data.input;\n      }\n      if (data.output) {\n        this.output = this.output ? this.output.concat(data.output) : data.output;\n      }\n      if (data.autoFetch) {\n        this.autoFetch = this.autoFetch ? this.autoFetch.concat(data.autoFetch) : data.autoFetch;\n      }\n    } else {\n      const policy = new Policy(data);\n      this.extend(policy);\n    }\n    return this;\n  }\n}\n\nexport interface PolicyPointerConfig {\n  type?: 'default' | 'property' | 'query' | 'prepared';\n  propertySource?: 'element' | 'res.locals' | 'req.query' | 'req.params';\n  pointer: any;\n  queryModel?: string | ObjectId | typeof Model; // string = Core Model, ObjectId = DynamicConfig\n  queryType?: 'one' | 'many';\n  query?: any;\n}\n\nexport type PolicyPointer = PolicyPointerConfig | string | number | boolean | Array<string>;\n\nexport interface PolicyCondition {\n  key: PolicyPointer;\n  operation: 'include' | 'exclude' | 'exists' | '!exists' | 'equals';\n  value?: PolicyPointer;\n}\n\nexport interface PolicyRule {\n  method?: Array<'get' | 'post' | 'put' | 'delete' | string>, // if not provided, apply to all, otherwise only apply to these methods\n  //prepare?: Array<PolicyPointer>;\n  conditions: PolicyCondition | PolicyCondition[];\n  conditionsOperator?: 'and' | 'or'; // and is default  \n  access?: boolean; // true for allow access (default)\n  includeProperties?: Array<string>;\n  excludeProperties?: Array<string>;\n}"]}