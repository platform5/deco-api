{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../../src/modules/user/auth.controller.ts"],"names":[],"mappings":";;AAAA,uDAAmD;AACnD,4DAAwD;AACxD,qCAAkE;AAClE,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC;AAEpD,MAAM,MAAM,GAAW,gBAAM,EAAE,CAAC;AAChC,MAAM,CAAC,IAAI,CACT,QAAQ,EACR,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,QAAQ,CACxB,CAAC;AAEF,MAAM,CAAC,IAAI,CACT,eAAe,EACf,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,WAAW,CAC3B,CAAA;AAED,MAAM,CAAC,IAAI,CACT,gBAAgB,EAChB,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,YAAY,EAC3B,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAClD,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI;QAAE,OAAO,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAClE,IAAI,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAA;AAC1C,CAAC,CACF,CAAA;AAED,MAAM,CAAC,IAAI,CACT,kBAAkB,EAClB,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,cAAc,CAC9B,CAAA;AAED,MAAM,CAAC,GAAG,CACR,iBAAiB,EACjB,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,aAAa,CAC7B,CAAA;AAED,MAAM,CAAC,GAAG,CACR,kBAAkB,EAClB,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,YAAY,EAC3B,gCAAc,CAAC,cAAc,CAC9B,CAAA;AAED,MAAM,CAAC,GAAG,CACR,uBAAuB,EACvB,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,YAAY,EAC3B,gCAAc,CAAC,0BAA0B,CAAC,OAAO,CAAC,CACnD,CAAA;AAED,MAAM,CAAC,GAAG,CACR,wBAAwB,EACxB,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,YAAY,EAC3B,gCAAc,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CACpD,CAAA;AAED,MAAM,CAAC,GAAG,CACR,wBAAwB,EACxB,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,YAAY,EAC3B,gCAAc,CAAC,2BAA2B,CAAC,OAAO,CAAC,CACpD,CAAA;AAED,MAAM,CAAC,GAAG,CACR,yBAAyB,EACzB,8BAAa,CAAC,kBAAkB,EAChC,gCAAc,CAAC,YAAY,EAC3B,gCAAc,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CACrD,CAAA;AAIY,QAAA,cAAc,GAAW,MAAM,CAAC","sourcesContent":["import { AuthMiddleware } from './auth.middleware';\nimport { AppMiddleware } from './../app/app.middleware';\nimport { Router, Request, Response, NextFunction } from 'express';\nlet debug = require('debug')('app:controller:auth');\n\nconst router: Router = Router();\nrouter.post(\n  '/token',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.getToken\n);\n\nrouter.post(\n  '/revoke-token',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.revokeToken\n)\n\nrouter.post(\n  '/authenticated',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.authenticate,\n  (req: Request, res: Response, next: NextFunction) => {\n    if (res.locals.app && res.locals.user) return res.sendStatus(204);\n    next(new Error('Authentication failed'))\n  }\n)\n\nrouter.post(\n  '/forgot-password',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.forgotPassword\n)\n\nrouter.put(\n  '/reset-password',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.resetPassword\n)\n\nrouter.put(\n  '/password-change',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.authenticate,\n  AuthMiddleware.passwordChange\n)\n\nrouter.put(\n  '/request-email-change',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.authenticate,\n  AuthMiddleware.requestEmailOrMobileChange('email')\n)\n\nrouter.put(\n  '/request-mobile-change',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.authenticate,\n  AuthMiddleware.requestEmailOrMobileChange('mobile')\n)\n\nrouter.put(\n  '/validate-email-change',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.authenticate,\n  AuthMiddleware.validateEmailOrMobileChange('email')\n)\n\nrouter.put(\n  '/validate-mobile-change',\n  AppMiddleware.fetchWithPublicKey,\n  AuthMiddleware.authenticate,\n  AuthMiddleware.validateEmailOrMobileChange('mobile')\n)\n\n\n\nexport const AuthController: Router = router;"]}