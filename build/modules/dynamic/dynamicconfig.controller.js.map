{"version":3,"file":"dynamicconfig.controller.js","sourceRoot":"","sources":["../../../src/modules/dynamic/dynamicconfig.controller.ts"],"names":[],"mappings":";;AAAA,+DAAsE;AACtE,+DAA2D;AAC3D,yFAAmF;AACnF,qCAAkE;AAClE,0BAAmC;AACnC,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC;AAEpD,MAAM,MAAM,GAAW,gBAAM,EAAE,CAAC;AAEhC,IAAI,mBAAmB,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;IAC5E,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,KAAK,QAAQ,EAAE;QACtE,IAAI;YACF,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC/C;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC,CAAC;SACjE;KACF;IACD,OAAO,IAAI,EAAE,CAAC;AAChB,CAAC,CAAA;AAED,IAAI,YAAY,GAAG,IAAI,wDAAyB,CAAC,wCAAkB,CAAC,CAAC;AACrE,YAAY,CAAC,oBAAoB,GAAG,IAAI,CAAC;AAEzC,MAAM,CAAC,GAAG,CACR,iCAAoB,CAAC,WAAW,EAAE,EAClC,iBAAa,CAAC,kBAAkB,EAChC,YAAY,CAAC,mBAAmB,EAAE,EAClC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,yBAAyB,EAAE,IAAI,EAAC,CAAC,CAC7D,CAAC;AAEF,MAAM,CAAC,GAAG,CACR,iCAAoB,CAAC,WAAW,EAAE,EAClC,iBAAa,CAAC,kBAAkB,EAChC,YAAY,CAAC,MAAM,EAAE,CACtB,CAAC;AAEF,MAAM,CAAC,IAAI,CACT,iCAAoB,CAAC,SAAS,EAAE,EAChC,iBAAa,CAAC,kBAAkB;AAChC,yCAAyC;AACzC,mBAAmB,EACnB,YAAY,CAAC,IAAI,EAAE,CACpB,CAAC;AAEF,MAAM,CAAC,GAAG,CACR,iCAAoB,CAAC,QAAQ,EAAE,EAC/B,iBAAa,CAAC,kBAAkB;AAChC,yCAAyC;AACzC,mBAAmB,EACnB,YAAY,CAAC,GAAG,EAAE,CACnB,CAAC;AAEF,MAAM,CAAC,MAAM,CACX,iCAAoB,CAAC,WAAW,EAAE,EAClC,iBAAa,CAAC,kBAAkB,EAChC,YAAY,CAAC,MAAM,EAAE,CACtB,CAAC;AAEW,QAAA,uBAAuB,GAAW,MAAM,CAAC","sourcesContent":["import { ControllerMiddleware } from './../../middlewares/controller';\nimport { DynamicConfigModel } from './dynamicconfig.model';\nimport { AccessControllerMiddlware } from './../user/access.middleware.controller';\nimport { Router, Request, Response, NextFunction } from 'express';\nimport { AppMiddleware } from '..';\nlet debug = require('debug')('app:controller:data');\n\nconst router: Router = Router();\n\nlet parsePolicyProperty = (req: Request, res: Response, next: NextFunction) => {\n  if (req.body && req.body.policy && typeof req.body.policy === 'string') {\n    try {\n      req.body.policy = JSON.parse(req.body.policy);\n    } catch (error) {\n      return next(new Error('Invalid JSON value in policy property'));\n    }\n  }\n  return next();\n}\n\nlet mdController = new AccessControllerMiddlware(DynamicConfigModel);\nmdController.enableRelatedToAppId = true;\n\nrouter.get(\n  ControllerMiddleware.getAllRoute(),\n  AppMiddleware.fetchWithPublicKey,\n  mdController.prepareQueryFromReq(),\n  mdController.getAll(null, {enableLastModifiedCaching: true})\n);\n\nrouter.get(\n  ControllerMiddleware.getOneRoute(),\n  AppMiddleware.fetchWithPublicKey,\n  mdController.getOne()\n);\n\nrouter.post(\n  ControllerMiddleware.postRoute(),\n  AppMiddleware.fetchWithPublicKey,\n  // AppMiddleware.addAppIdToBody('appId'),\n  parsePolicyProperty,\n  mdController.post()\n);\n\nrouter.put(\n  ControllerMiddleware.putRoute(),\n  AppMiddleware.fetchWithPublicKey,\n  // AppMiddleware.addAppIdToBody('appId'),\n  parsePolicyProperty,\n  mdController.put()\n);\n\nrouter.delete(\n  ControllerMiddleware.deleteRoute(),\n  AppMiddleware.fetchWithPublicKey,\n  mdController.delete()\n);\n\nexport const DynamicConfigController: Router = router;"]}