{"version":3,"file":"dynamic.helper.js","sourceRoot":"","sources":["../../../src/modules/dynamic/dynamic.helper.ts"],"names":[],"mappings":";;AAAA,6DAAyD;AACzD,qFAA+E;AAC/E,kDAA8C;AAC9C,+DAA2D;AAC3D,8BAA+C;AAC/C,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC;AAEpD,MAAa,aAAa;IAExB,MAAM,CAAC,eAAe,CAAC,KAAe,EAAE,IAAY;QAClD,IAAI,WAA+B,CAAC;QACpC,IAAI,IAAU,CAAC;QACf,IAAI,UAAoB,CAAC;QACzB,OAAO,wCAAkB,CAAC,eAAe,CAAC,EAAC,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACxF,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;YAClD,WAAW,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,cAAc;gBAAE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;YAChE,OAAO,oBAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACZ,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAE,oBAAoB,CAAC,CAAC;YAC/C,UAAU,GAAG,CAAC,CAAC;YACf,IAAI,GAAG,4DAA2B,CAAC,sBAAsB,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;YAC1F,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,GAAa,EAAE,IAAY,EAAE,EAAqB;QAC1E,IAAI,WAA+B,CAAC;QACpC,IAAI,OAAiB,CAAC;QACtB,IAAI,IAAU,CAAC;QACf,IAAI,UAAoB,CAAC;QACzB,IAAI,EAAE,YAAY,YAAQ,EAAE;YAC1B,OAAO,GAAG,EAAE,CAAC;SACd;aAAM;YACL,IAAI;gBACF,OAAO,GAAG,IAAI,YAAQ,CAAC,EAAE,CAAC,CAAC;aAC5B;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;aACpC;SACF;QACD,OAAO,wCAAkB,CAAC,eAAe,CAAC,EAAC,cAAc,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YAC1F,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACpD,WAAW,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,cAAc;gBAAE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;YAChE,OAAO,oBAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACZ,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAE,oBAAoB,CAAC,CAAC;YAC/C,UAAU,GAAG,CAAC,CAAC;YACf,IAAI,GAAG,4DAA2B,CAAC,sBAAsB,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;YACxF,OAAO,sCAAiB,CAAC,YAAY,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACZ,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC7C,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,GAAa,EAAE,IAAY,EAAE,KAAY;QAClE,IAAI,WAA+B,CAAC;QACpC,IAAI,IAAU,CAAC;QACf,IAAI,UAAoB,CAAC;QACzB,OAAO,wCAAkB,CAAC,eAAe,CAAC,EAAC,cAAc,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YAC1F,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACpD,WAAW,GAAG,CAAC,CAAC;YAChB,IAAI,CAAC,WAAW,CAAC,cAAc;gBAAE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;YAChE,OAAO,oBAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACZ,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAE,oBAAoB,CAAC,CAAC;YAC/C,UAAU,GAAG,CAAC,CAAC;YACf,KAAK,CAAC,QAAQ,CAAC,EAAC,OAAO,EAAE,WAAW,CAAC,GAAG,EAAC,CAAC,CAAC;YAC3C,IAAI,GAAG,4DAA2B,CAAC,sBAAsB,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;YACxF,OAAO,sCAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;YACZ,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC7C,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AArED,sCAqEC","sourcesContent":["import { DynamicDataModel2 } from './dynamicdata2.model';\nimport { Dynamic2MiddlwareController } from './dynamic2.middleware.controller';\nimport { AppModel } from './../app/app.model';\nimport { DynamicConfigModel } from './dynamicconfig.model';\nimport { ObjectId, Query, Deco } from '../../';\nlet debug = require('debug')('app:helpers:dynamic');\n\nexport class DynamicHelper {\n\n  static getDecoFromSlug(appId: ObjectId, slug: string): Promise<Deco> {\n    let configModel: DynamicConfigModel;\n    let deco: Deco;\n    let relatedApp: AppModel;\n    return DynamicConfigModel.getOneWithQuery({relatedToAppId: appId, slug: slug}).then((c) => {\n      if (!c) throw new Error('Model Config not found');\n      configModel = c;\n      if (!configModel.relatedToAppId) throw new Error('Invalid app');\n      return AppModel.getOneWithId(configModel.relatedToAppId);\n    }).then((a) => {\n      if (!a) throw new Error ('Missing relatedApp');\n      relatedApp = a;\n      deco = Dynamic2MiddlwareController.getDecoFromConfigModel(configModel, appId, relatedApp);\n      return deco;\n    });\n  }\n  \n  static getElementInstance(app: AppModel, slug: string, id: string | ObjectId): Promise<DynamicDataModel2> {\n    let configModel: DynamicConfigModel;\n    let modelId: ObjectId;\n    let deco: Deco;\n    let relatedApp: AppModel;\n    if (id instanceof ObjectId) {\n      modelId = id;\n    } else {\n      try {\n        modelId = new ObjectId(id);\n      } catch (e) {\n        throw new Error('Invalid modelId');\n      }\n    }\n    return DynamicConfigModel.getOneWithQuery({relatedToAppId: app._id, slug: slug}).then((c) => {\n      if (!c) throw new Error('Element config not found');\n      configModel = c;\n      if (!configModel.relatedToAppId) throw new Error('Invalid app');\n      return AppModel.getOneWithId(configModel.relatedToAppId);\n    }).then((a) => {\n      if (!a) throw new Error ('Missing relatedApp');\n      relatedApp = a;\n      deco = Dynamic2MiddlwareController.getDecoFromConfigModel(configModel, app, relatedApp);\n      return DynamicDataModel2.getOneWithId(modelId, {deco: deco});\n    }).then((e) => {\n      if (!e) throw new Error('Element not found');\n      return e;\n    });\n  }\n\n  static getElementInstances(app: AppModel, slug: string, query: Query): Promise<Array<DynamicDataModel2>> {\n    let configModel: DynamicConfigModel;\n    let deco: Deco;\n    let relatedApp: AppModel;\n    return DynamicConfigModel.getOneWithQuery({relatedToAppId: app._id, slug: slug}).then((c) => {\n      if (!c) throw new Error('Element config not found');\n      configModel = c;\n      if (!configModel.relatedToAppId) throw new Error('Invalid app');\n      return AppModel.getOneWithId(configModel.relatedToAppId);\n    }).then((a) => {\n      if (!a) throw new Error ('Missing relatedApp');\n      relatedApp = a;\n      query.addQuery({modelId: configModel._id});\n      deco = Dynamic2MiddlwareController.getDecoFromConfigModel(configModel, app, relatedApp);\n      return DynamicDataModel2.getAll(query, {deco: deco});\n    }).then((e) => {\n      if (!e) throw new Error('Element not found');\n      return e;\n    });\n  }\n}\n"]}