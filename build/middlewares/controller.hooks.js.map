{"version":3,"file":"controller.hooks.js","sourceRoot":"","sources":["../../src/middlewares/controller.hooks.ts"],"names":[],"mappings":"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","sourcesContent":["import { GetAllOptions } from './../decorators/model';\nimport { GetOneOptions } from './../decorators/model';\nimport { Deco } from '../interfaces/deco';\nimport { Query } from \"../helpers/query\";\nimport { Request, Response } from 'express';\nimport { ObjectId } from 'mongodb';\nimport { Model } from '../decorators/model';\nlet debug = require('debug')('deco-api:middleware:controller.hooks');\n\nexport class ControllerHooksMiddleware {\n\n  /**\n   * Hook allowing request modification before performing the control action\n   * @param req \n   * @param control \n   */\n  extendRequest(req: Request, control: 'getAll' | 'getOne' | 'post' | 'put' | 'delete'): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Hook allowing to modify the query used in getAll control action\n   * @param query \n   * @param req \n   * @param res \n   */\n  extendGetAllQuery(query: Query, req: Request, res: Response, options?: GetAllOptions): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * Hook allowing to modify the query used in getOne, put(), delete() control action\n   * @param query \n   * @param req \n   * @param res \n   */\n  extendGetOneQuery(query: Query, req: Request, res: Response, options?: GetOneOptions): Promise<void> {\n    return Promise.resolve();\n  }\n\n  preInput<T>(element: T, req: Request, response: Response): Promise<T> {\n    return Promise.resolve(element);\n  }\n\n  getOneElementId(elementId: string | ObjectId, req: Request, res: Response): Promise<string | ObjectId> {\n    return Promise.resolve(elementId);\n  }\n\n  getOneElement(element: Model, req: Request, res: Response): Promise<Model> {\n    return Promise.resolve(element);\n  }\n\n  postElement(element: Model, req: Request, res: Response): Promise<Model> {\n    return Promise.resolve(element);\n  }\n\n  postManyQuantity(element: Model, req: Request, res: Response, quantity?: number): Promise<number> {\n    return Promise.resolve(1);\n  }\n\n  postAfterInsert(element: Model, req: Request, res: Response): Promise<Model> {\n    return Promise.resolve(element);\n  }\n\n  putElementId(elementId: string | ObjectId, req: Request, res: Response): Promise<string | ObjectId> {\n    return Promise.resolve(elementId);\n  }\n\n  putElement(element: Model, req: Request, res: Response): Promise<Model> {\n    return Promise.resolve(element);\n  }\n\n  putAfterUpdate(element: Model, req: Request, res: Response): Promise<Model> {\n    return Promise.resolve(element);\n  }\n\n  deleteElementId(elementId: string | ObjectId, req: Request, res: Response): Promise<string | ObjectId> {\n    return Promise.resolve(elementId);\n  }\n\n  deleteElement(element: Model, req: Request, res: Response): Promise<Model> {\n    return Promise.resolve(element);\n  }\n\n  deleteAfterDelete(result: any, req: Request, res: Response): Promise<any> {\n    return Promise.resolve(result);\n  }\n\n  queryBefore(req: Request, res: Response, query: Query, deco?: Deco): Promise<Query> {\n    return Promise.resolve(query);\n  }\n\n  queryAfter(req: Request, res: Response, query: Query, deco?: Deco): Promise<Query> {\n    return Promise.resolve(query);\n  }\n\n  postOutput(element: any, req: Request, res: Response): Promise<any> {\n    return Promise.resolve(element);\n  }\n\n  postOutputList(elements: any, req: Request, res: Response): Promise<any> {\n    return Promise.resolve(elements);\n  }\n\n}"]}