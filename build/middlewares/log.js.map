{"version":3,"file":"log.js","sourceRoot":"","sources":["../../src/middlewares/log.ts"],"names":[],"mappings":"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","sourcesContent":["import { RequestHandler, Request, Response, NextFunction } from 'express';\nimport morgan from 'morgan';\nimport fs from 'fs';\nimport rfs from 'rotating-file-stream';\nlet debug = require('debug')('deco-api:middleware:log');\n\nexport class Log {\n  static rotateLog: boolean = true;\n  static logFolder: string = 'logs/';\n  static logFormat: string = 'common';\n  static extraErrorLog: boolean = true;\n  static extraErrorLogFormat: string = 'common';\n  static devLog: boolean = true;\n\n  private static logInitOk: boolean = false;\n  private static accessLogStream: any;\n  private static accessErrorLogStream: any;\n  private static errorsLogStream: any;\n\n  static accessMiddleware() {\n    let md = [Log.logRequests()];\n    if (Log.extraErrorLog) {\n      md.push(Log.logAccessErrors());\n    }\n    if (Log.devLog) {\n      md.push(Log.logDevConsole());\n    }\n    return md;\n  }\n\n  static initLogFolderAndStreams() {\n    if (!Log.logInitOk) {\n      fs.existsSync(Log.logFolder) || fs.mkdirSync(Log.logFolder);\n      Log.accessLogStream = rfs('access.log', {\n        interval: '1d', // rotate daily\n        path: Log.logFolder\n      });\n      Log.accessErrorLogStream = rfs('access-errors.log', {\n        interval: '1d', // rotate daily\n        path: Log.logFolder\n      });\n      Log.errorsLogStream = rfs('errors.log', {\n        interval: '1d', // rotate daily\n        path: Log.logFolder\n      });\n      Log.logInitOk = true;\n    }\n  }\n\n  static logRequests(): RequestHandler {\n    Log.initLogFolderAndStreams();\n    return morgan(Log.logFormat, {stream: Log.accessLogStream});\n  }\n\n  static logAccessErrors(): RequestHandler {\n    Log.initLogFolderAndStreams();\n    return morgan(Log.extraErrorLogFormat, {stream: Log.accessErrorLogStream, skip: function (req, res) { return res.statusCode < 400 }});\n  }\n\n  static logDevConsole(): RequestHandler {\n    return morgan('dev', {\n      skip: function (req, res) { return res.statusCode < 400 }\n    });\n  }\n\n  static errorsMiddleware() {\n    Log.initLogFolderAndStreams();\n\n    return (err: Error, req: Request, res: Response, next: NextFunction) => {\n      // get filename\n      let filename: string = '';\n      if (err.stack) {\n        let parts = err.stack.split(' at ');\n        let keep = parts[1];\n        parts = keep.split(')');\n        keep = parts[0];\n        filename = keep.replace(/:/g, '...');\n        filename = filename.trim();\n      }\n\n      morgan(`:method :url :status ${err.message} ${filename}`, {stream: Log.errorsLogStream})(req, res, () => {\n        next(err); // we cannot really send the \"err\" anyway, because response is already away at this point\n      });\n    }\n  }\n\n}"]}