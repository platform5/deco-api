{"version":3,"file":"cache-last-modified.js","sourceRoot":"","sources":["../../src/middlewares/cache-last-modified.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport moment from 'moment';\n\nexport class CacheLastModified {\n  static init() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const lastModifiedRequest = req.header('If-Modified-Since') || '';\n      CacheLastModified.registerCacheLastModified(res, lastModifiedRequest);\n      next();\n    };\n  }\n\n  static send(prop: 'auto' | 'element' | 'elements' | string = 'auto', source: 'locals' = 'locals') {\n    return (req: Request, res: Response, next: NextFunction) => {\n      let lastModifiedResponse = '';\n      if (!res.locals.cacheLastModified) {\n        return next('Missing cacheLastModified');\n      }\n      const lastModifiedRequest = res.locals.cacheLastModified.lastModified || '';\n      let data: any | any[];\n      if (source === 'locals') {\n        if (prop === 'auto') {\n          data = res.locals.elements || res.locals.element;\n        } else {\n          data = res.locals[prop];\n        }\n      }\n      if (!data) {\n        return next(new Error('Data not found'));\n      }\n      if (!Array.isArray(data)) {\n        data = [data];\n      }\n      const DATE_RFC2822 = \"ddd, DD MMM YYYY HH:mm:ss ZZ\";\n      let lastUpdatedMoment = moment().subtract(50, 'years');\n      for (let element of data) {\n        const updatedAt = element._updatedAt;\n        if (!updatedAt) {\n          continue;\n        }\n        const elementMoment = moment(updatedAt);\n        if (elementMoment.isAfter(lastUpdatedMoment)) {\n          lastUpdatedMoment = elementMoment;\n          lastModifiedResponse = elementMoment.lang('en').format(DATE_RFC2822);\n        }\n      }\n      if (lastModifiedResponse && lastModifiedResponse === lastModifiedRequest) {\n        res.setHeader('Cache-Control', 'private, must-revalidate');\n        res.sendStatus(304);\n      } else {\n        res.setHeader('Cache-Control', 'private, must-revalidate');\n        res.setHeader('Last-Modified', lastModifiedResponse);\n        res.send(data);\n      }\n    };\n  }\n\n  private static registerCacheLastModified(res: Response, lastModified: string) {\n    if (!res.locals.cacheLastModified) {\n      res.locals.cacheLastModified = {};\n    }\n    res.locals.cacheLastModified.lastModified = lastModified;\n\n  }\n\n}"]}