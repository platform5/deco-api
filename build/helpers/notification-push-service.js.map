{"version":3,"file":"notification-push-service.js","sourceRoot":"","sources":["../../src/helpers/notification-push-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { PushPlayerModel, PushNotificationModel, StringTMap, Query, ObjectId, AppModel } from '../';\nimport PushNotifications from 'node-pushnotifications';\nimport moment from 'moment';\nlet debug = require('debug')('app:helpers:notification-push-service');\n\nexport interface PushConfig {\n  enabled?: boolean;\n  gcmId?: string;\n  apnCert?: string;\n  apnKey?: string;\n  apnPass?: string;\n  apnProduction?: boolean;\n}\n\nexport class NotificationPushService {\n\n  push: PushNotifications;\n  appId: ObjectId;\n  config: PushConfig;\n  configString: string;\n  lastUsageAt: Date;\n  connected: boolean = false;\n\n  static servicesByApp: StringTMap<NotificationPushService> = {};\n\n  static pushConfigFromApp(app: AppModel): PushConfig {\n    let pushConfig: PushConfig = {\n      enabled: app.pushEnabled,\n      gcmId: app.pushGmId,\n      apnCert: app.pushApnCert,\n      apnKey: app.pushApnKey,\n      apnPass: app.pushApnPass,\n      apnProduction: app.pushApnProduction\n    }\n    return pushConfig;\n  }\n\n  static serviceForApp(app: AppModel): NotificationPushService {\n    if (!app) throw new Error('Missing app');\n    let pushConfig = NotificationPushService.pushConfigFromApp(app);\n\n    let configString = JSON.stringify(pushConfig);\n    let appIdString = app._id.toString();\n    let instance:NotificationPushService = NotificationPushService.servicesByApp[appIdString];\n    if (instance && instance.configString === configString) {\n      instance.bumpUsage();\n      return instance;\n    } else if (instance && instance.configString !== configString) {\n      instance.disconnect();\n      instance.setConfig(pushConfig);\n      return instance;\n    }\n    let pushService = new NotificationPushService(app);\n    return pushService;\n  }\n\n  static shutdownUnsedService() {\n    for (let appId of Object.keys(NotificationPushService.servicesByApp)) {\n      let instance = NotificationPushService.servicesByApp[appId];\n      if (instance.connected && moment(instance.lastUsageAt).isBefore(moment().subtract(5, 'minutes'))) {\n        instance.disconnect();\n        delete NotificationPushService.servicesByApp[appId];\n      }\n    }\n  }\n\n  constructor(app: AppModel) {\n    if (!app) throw new Error('Missing app');\n    debug('Instantiate service for app', app.name, app._id);\n\n    let pushConfig = NotificationPushService.pushConfigFromApp(app);\n    let appIdString = app._id.toString();\n    let instance:NotificationPushService = NotificationPushService.servicesByApp[appIdString];\n    if (instance) throw new Error('Operation not permitted: instance already exists. Use NotificationPushService.serviceForApp() to get the NotificationPushService instance.')\n    this.appId = app._id;\n    this.setConfig(pushConfig);\n    this.connect();\n    NotificationPushService.servicesByApp[appIdString] = this;\n  }\n\n  setConfig(pushConfig: PushConfig) {\n    this.config = pushConfig;\n  }\n\n  bumpUsage() {\n    debug('bumpUsage for', this.appId);\n    this.lastUsageAt = moment().toDate();\n  }\n\n  disconnect() {\n    debug('disconnect', this.appId);\n    (this.push as any).apn.shutdown();\n    this.connected = false;\n  }\n\n  connect() {\n    debug('connect', this.appId);\n    let settings: PushNotifications.Settings = {};\n    if (!this.config.enabled) throw new Error('Push is not enabled for this app');\n    if (this.config.apnCert && this.config.apnKey) {\n      settings.apn = {\n        cert: this.config.apnCert,\n        key: this.config.apnKey,\n        passphrase: this.config.apnPass,\n        production: this.config.apnProduction\n      }\n    }\n    if (this.config.gcmId) {\n      settings.gcm = {\n        id: this.config.gcmId\n      };\n      (settings as any).gcm.phonegap = true;\n    }\n    this.push = new PushNotifications(settings);\n    this.bumpUsage();\n    this.connected = true;\n  }\n\n  static sendPendingNotifications() {\n    let query = new Query();\n    query.addQuery({sent: false});\n    query.addQuery({$or: [\n      {sendAt: {$lte: moment().toDate()}},\n      {sendAt: null}\n    ]});\n    PushNotificationModel.getAll(query).then((notifications) => {\n      let promises: Array<Promise<any>> = [];\n      for (let notification of notifications) {\n        promises.push(NotificationPushService.sendNotification(notification));\n      }\n    });\n  }\n\n  static sendNotification(notification: PushNotificationModel): Promise<any> {\n    let push: NotificationPushService;\n    let app: AppModel;\n    return AppModel.getOneWithId(notification.appId).then((a) => {\n      if (!a) throw new Error('App Not Found');\n      app = a;\n      push = NotificationPushService.serviceForApp(app);\n      let playerQuery = new Query();\n      playerQuery.addQuery({appId: notification.appId, active: true});\n      if (notification.sendToTags && notification.sendToTags.length) {\n        playerQuery.addQuery({tags: {$in: notification.sendToTags}});\n      }\n      return PushPlayerModel.getAll(playerQuery);\n    }).then((players) => {\n      let regIds = players.map(i => i.regId);\n      let data:PushNotifications.Data = {\n        title: notification.title,\n        body: notification.message,\n        topic: app.pushTopic,\n      };\n      if (notification.collapseKey) {\n        data.collapseKey = notification.collapseKey;\n      }\n      if (notification.contentAvailable) {\n        data.contentAvailable = notification.contentAvailable;\n      }\n      if (notification.badge) {\n        data.badge = notification.badge;\n      }\n      if (notification.custom) {\n        try {\n          let custom = JSON.parse(notification.custom);\n          data.custom = custom;\n        } catch (error) {\n          (data.custom as any) = {data: notification.custom};\n        }\n      } else {\n        data.custom = {};\n      }\n      (data.custom as any).notId = notification._id.toString();\n      return push.push.send(regIds, data)\n        .then((results) => {\n          let successRegId: Array<string> = [];\n          for (let result of results) {\n            for (let message of result.message) {\n              let tmp = message.regId;\n              let regId: string;\n              if (typeof tmp === 'string') {\n                regId = tmp;\n              } else {\n                regId = (tmp as any).device;\n              }\n              debug('regId', regId);\n              if (message.error === null) {\n                debug('-> sent ok');\n                successRegId.push(regId);\n              } else if (message.error instanceof Error) {\n                debug('-> sent error');\n                if (message.error.message === 'InvalidRegistration' || message.error.message === 'BadDeviceToken') {\n                  debug('-> make player inactive', regId);\n                  PushPlayerModel.getOneWithQuery({regId: regId}).then((p) => {\n                    if (p) {\n                      p.active = false;\n                      p.update(['active']);\n                    };\n                  })\n                } else {\n                  debug('-> error message', message.error.message);\n                  debug('message', message);\n                }\n              }\n            }\n          }\n\n          notification.sentToRegIds = successRegId;\n          notification.sent = true;\n          notification.sentAt = moment().toDate();\n          return notification.update(['sent', 'sentAt', 'sentToRegIds']);\n        }).catch((error: any) => { \n          debug('send error', error);\n        });\n    });\n    \n  }\n\n}\n\nsetInterval(() => {\n  NotificationPushService.shutdownUnsedService();\n}, 1000 * 60 * 30);\n\n// setInterval(() => {\n//   NotificationPushService.sendPendingNotifications();\n// }, 1000 * 5);\n\n\n// let deviceIDs = [\n//   'd6187479b7b08de810b0e7313c06a1cb0f359eb3651b64e0d2e8de72a518633e',\n//   //'d4wCeIjxqoE:APA91bEbF06Uv-lbIMpbXd1Aflsx-bVzrilp11vzq5UP5JZA-vTrg0XL9OIe9x5KDMJ39MbW97mt75u0epjcEDyE-hmEk15NSCkTXtlHvzf7naRoqTfF4rLy9XO0HBAysXyOIpTPSbSW'\n// ];\n// let data: PushNotifications.Data = {\n//   title: 'Not title',\n//   body: 'Not body',\n//   topic: 'com.icfneuchatel.app',\n//   alert: {\n//     title: 'Alert title',\n//     body: 'Alert body'\n//   }\n// };\n\n// setTimeout(() => {\n//   debug('Testing Service');\n//   let app: AppModel;\n//   AppModel.getOneWithId('5ce2b0ca3df63c72f3ece709').then((a) => {\n//     if (!a) throw new Error('App Not Found');\n//     app = a;\n//     let push = NotificationPushService.serviceForApp(app)\n//     debug('got push service', push);\n\n//     setTimeout(() => {\n//       debug('sending a notification');\n//       push.push.send(deviceIDs, data)\n//         .then((results: any) => {\n//           debug('send results', results);\n//           debug('results[0]', results[0]);\n//         }).catch((error: any) => { \n//           debug('send error', error);\n//         });\n//     }, 2000);\n\n\n//     setTimeout(() => {\n//       push.disconnect();\n//       debug('service disconnected');\n//     }, 20000);\n//   }).catch((error) => {\n//     debug('error', error);\n//   });\n// }, 2000);"]}