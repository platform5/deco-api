{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../src/helpers/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\n\ninterface Metadata {\n  key: string;\n  value: any;\n}\n\nexport class Parser {\n\n  private static valueInObject(obj: any, path: string) {\n    const args = path.split('.');\n    return args.reduce((obj, level) => obj && obj[level], obj);\n  }\n\n  private static parseMetadata(key: string, object: {metadata: Metadata[]}): string | '' {\n    for (let meta of object.metadata || []) {\n      if (meta.key === key) {\n        return meta.value;\n      }\n    }\n    return '';\n  }\n\n  private static parseObject(parts: string[], object: any): string | undefined {\n    if (typeof object !== 'object') return undefined;\n    let replace: string | undefined = undefined;\n    // extract value\n    if (parts[0] === 'metadata') {\n      replace = Parser.parseMetadata(parts[1], object);\n      parts.shift();\n      parts.shift();\n    } else {\n      replace = Parser.valueInObject(object, parts[0]);\n      parts.shift();\n    }\n    if (!replace) {\n      return replace;\n    }\n    // apply converter\n    if (parts[0] === 'date' && parts[1]) {\n      const date = Parser.parseDate(replace);\n      replace = date === '' ? '' : date.format(parts[1]);\n    }\n    if (parts[0] === 'round' && parts[1]) {\n      replace = parseFloat(parseFloat(replace).toFixed(parseInt(parts[1], 10))).toString();\n    }\n    return replace;\n  }\n\n  private static parseDate(text: string): moment.Moment | '' {\n    if (!text) {\n      return '';\n    }\n    const simpleParsing = moment(text);\n    if (simpleParsing.isValid()) {\n      return simpleParsing;\n    }\n    const basicParsing = moment(text, 'DD-MM-YYYY');\n    if (basicParsing.isValid()) {\n      return basicParsing;\n    }\n    return '';\n  }\n\n  public static parseTemplate(text: string, objects: {[key: string]: any}) {\n    if (typeof text !== 'string' || text.length === 0) {\n      return text;\n    }\n    const matches = text.match(/(#|!){(.*?)}/gm);\n    if (!matches) {\n      return text;\n    }\n    for (const original of matches) {\n      const parts = original.substr(2, original.length - 3).split(':');\n      let replace: undefined | string = undefined;\n      let object: any = objects[parts[0]];\n      parts.shift();\n      replace = Parser.parseObject(parts, object);\n      // If the original is written with !{...} it means that if the value is not found (undefined)\n      // we will remove the entire line\n      // But if the original is written with #{} it means that we simply display an empty value (empty string '')\n      if (replace === undefined && original.substr(0, 1) === '#') {\n        replace = ''; // set an empty string => it will trigger the replace\n      }\n      if (replace !== undefined) {\n        text = text.replace(original, replace);\n      }\n    }\n    // remove all lines still containing a !{}\n    text = text.split('\\n').filter(line => !line.includes('!{')).join('\\n');\n    return text;\n  }\n}\n"]}