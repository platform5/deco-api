{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../src/helpers/actions.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC;AAEpD,MAAa,cAAc;IAElB,MAAM,CAAC,YAAY,CAAC,GAAa,EAAE,SAA+B;QACvE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE;YACvB,GAAG,CAAC,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;SACzB;QACD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE;YACjC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,GAAG,EAAE,CAAC;SACnC;QACD,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;YAC3B,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;SACpD;IACH,CAAC;IAED;;;;;;;;;OASG;IACI,MAAM,CAAO,UAAU,CAAC,GAAa,EAAE,OAA0B,EAAE,SAAgC;;YACxG,IAAI,SAAS,EAAE;gBACb,cAAc,CAAC,YAAY,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;aAC7C;YACD,MAAM,OAAO,GAAoB,EAAE,CAAC;YACpC,KAAK,MAAM,cAAc,IAAI,OAAO,EAAE;gBACpC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC;aACrE;YACD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC5B,IAAI;oBACF,MAAM,MAAM,CAAC;iBACd;gBAAC,OAAO,KAAK,EAAE;oBACd,aAAa;iBACd;aACF;QACH,CAAC;KAAA;IAEO,MAAM,CAAO,iBAAiB,CAAC,GAAa,EAAE,OAAwB;;YAC5E,IAAI;gBACF,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC5B,MAAM,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;iBACvB;aACF;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC;KAAA;CAEF;AAnDD,wCAmDC;AAED,MAAsB,MAAM;IACnB,MAAM,CAAC,GAAG,CAAC,GAAa,IAAS,CAAC;CAC1C;AAFD,wBAEC","sourcesContent":["import { Response } from \"express\";\nlet debug = require('debug')('app:actions:service');\n\nexport class ActionsService {\n\n  public static setVariables(res: Response, variables: {[key: string]: any}) {\n    if (!res.locals.actions) {\n      res.locals.actions = {};\n    }\n    if (!res.locals.actions.variables) {\n      res.locals.actions.variables = {};\n    }\n    for (const key in variables) {\n      res.locals.actions.variables[key] = variables[key];\n    }\n  }\n\n  /**\n   * \n   * Call a series of actions attached to a request\n   * The actions will not infer the actual response sent to the requester\n   * The will be performed if everything works well and abandonned if something\n   * goes wrong.\n   * \n   * @param res Express Response to which these actions should be attached\n   * @param actions Two-level deep actions array. The first level of actions will be run asynchronously (in parallel) and the second layer actions will be called synchronously (serie)\n   */\n  public static async runActions(res: Response, actions: typeof Action[][], variables?: {[key: string]: any}): Promise<void> {\n    if (variables) {\n      ActionsService.setVariables(res, variables);\n    }\n    const results: Promise<void>[] = [];\n    for (const parallelAction of actions) {\n      results.push(ActionsService.runActionsInSerie(res, parallelAction));\n    }\n    for (const result of results) {\n      try {\n        await result;\n      } catch (error) {\n        // do nothing\n      }\n    }\n  }\n\n  private static async runActionsInSerie(res: Response, actions: typeof Action[]): Promise<void> {\n    try {\n      for (const action of actions) {\n        await action.run(res);\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n}\n\nexport abstract class Action {\n  public static run(res: Response): void {}\n}"]}