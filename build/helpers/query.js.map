{"version":3,"file":"query.js","sourceRoot":"","sources":["../../src/helpers/query.ts"],"names":[],"mappings":"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","sourcesContent":["let debug = require('debug')('deco-api:helpers:query');\n\nexport class Query {\n  private _queries: Array<any> = [];\n  private _orderBy: any = {};\n  private _limit: number = 0;\n  private _skip: number = 0;\n\n  constructor(query: any | null = null) {\n    if (query !== null) this.addQuery(query);\n    return this;\n  }\n\n  addQuery(query: object = {}) {\n    if (typeof query !== 'object' || query instanceof Object === false) throw new Error('Invalid query parameter');\n    if (Object.keys(query).length) this._queries.push(query);\n    return this;\n  }\n\n  addQueryForKey(key: string, query: object = {}) {\n    let queryForKey: any = {};\n    queryForKey[key] = query;\n    return this.addQuery(queryForKey);\n  }\n\n  orderBy(field: string, direction: 'ASC' | 'DESC' | 'asc' | 'desc' = 'ASC') {\n    if (typeof field !== 'string') throw new Error('Invalid field parameter');\n    this._orderBy[field] = (direction.toLowerCase() === 'asc') ? 1 : -1;\n    return this;\n  }\n\n  limit(nb: string | number | null) {\n    if (typeof nb === 'string') {\n      nb = parseInt(nb, 10);\n    }\n    if (nb !== null && typeof nb !== 'number') throw new Error('Invalid nb parameter');\n    if (nb === null) this._limit = 0;\n    else  this._limit = nb;\n    return this;\n  }\n\n  skip(nb: string | number | null) {\n    if (typeof nb === 'string') {\n      nb = parseInt(nb, 10);\n    }\n    if (nb !== null && typeof nb !== 'number') throw new Error('Invalid nb parameter');\n    if (nb === null) this._skip = 0;\n    else  this._skip = nb;\n    return this;\n  }\n\n  complete() {\n    return {\n      $query: this.onlyQuery(),\n      $sort: this._orderBy\n    };\n  }\n\n  print() {\n    return JSON.stringify(this.complete());\n  }\n\n  onlyQuery() {\n    if (this._queries.length === 0) return {};\n    return (this._queries.length === 1) ? this._queries[0] : {$and: this._queries};\n  }\n\n  onlySort() {\n    return this._orderBy;\n  }\n\n  onlySkip() {\n    return this._skip;\n  }\n\n  onlyLimit() {\n    return this._limit;\n  }\n}"]}