{"version":3,"file":"pdf.helper.js","sourceRoot":"","sources":["../../src/helpers/pdf.helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { PDFDocument, PDFPage, PDFFont, CreateOptions, StandardFonts, rgb } from 'pdf-lib';\nimport { RGB, Grayscale, CMYK } from 'pdf-lib';\nimport { Request, Response, NextFunction } from 'express';\nimport marked from 'marked';\n\n\nexport class PDF {\n\n  public document: PDFDocument;\n  public currentPage: PDFPage;\n  public pageWidth: number;\n  public pageHeight: number;\n  public currentFont: PDFFont;\n  public currentFontBold: PDFFont;\n  public currentFontOblique: PDFFont;\n  public currentFontBoldOblique: PDFFont;\n  public currentTextColor: RGB | Grayscale | CMYK = rgb(0, 0, 0);\n  public marginLeft: number = 15;\n  public marginRight: number = 15;\n  public marginTop: number = 15;\n  public marginBottom: number = 15;\n\n  constructor() {\n  \n  }\n\n  public async create(options?: CreateOptions) {\n    this.document = await PDFDocument.create(options);\n    await this.addPage();\n    this.currentFont = await this.document.embedFont(StandardFonts.Helvetica);\n    this.currentFontBold = await this.document.embedFont(StandardFonts.HelveticaBold);\n    this.currentFontOblique = await this.document.embedFont(StandardFonts.HelveticaOblique);\n    this.currentFontBoldOblique = await this.document.embedFont(StandardFonts.HelveticaBoldOblique);\n  }\n\n  public async addPage() {\n    this.currentPage = this.document.addPage();\n    const {width, height} = this.currentPage.getSize();\n    this.pageWidth = width;\n    this.pageHeight = height;\n    this.currentPage.moveTo(this.marginLeft, this.pageHeight - this.marginTop);\n  }\n\n  public static testRoute() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      new Promise(async (resolve, reject) => {\n        try {\n          const pdf = new PDF();\n          await pdf.create();\n          const text = `# Test d'un document PDF\n\nCe document est généré avec le PDF Helper de Swissdata. Il utilise un format Markdown qui permet de mettre **du texte en gras** ou de le mettre en *évidence avec de l'italique*.\n\n## Element supportés\n\nComme dit plus haut, le gras et l'italique sont supporté, ainsi que les titres de sections en utilisant le # en début de ligne.\n\nLes paragraphes sont pris en compte.\n\n### Couleurs\n\nLes couleurs sont aussi permises (color:1,0,0) grâce à une syntaxe custom. (color:0)\n\n### A venir\n\nIl est prévu d'ajouter le support pour le texte aligné à droite, ainsi que les listes à puce, les images et les liens.\n\n### Conclusion\n\nIl ne reste plus qu'à créer des beaux PDF.`;\n          const textBlock = new PDFTextBlock(pdf);\n          textBlock.text = text;\n          textBlock.apply();\n          const file = await pdf.document.save();\n          const fileName = 'test.pdf';\n\n          res.writeHead(200, {\n            'Content-Type': 'application/pdf',\n            'Content-Disposition': 'attachment; filename=' + fileName,\n            'Content-Length': file.length\n          });\n          res.end(Buffer.from(file));\n          return resolve(null);\n        } catch (error) {\n          return reject(error);\n        }\n      });\n\n    }\n  }\n\n}\n\nexport abstract class PDFBlock {\n\n  public x?: number;\n  public y?: number;\n\n  public pdf: PDF;\n\n  constructor(pdf: PDF) {\n    this.pdf = pdf;\n  }\n\n  public abstract apply(pdf: PDF): void;\n\n  public moveDownAndAddPageIfNecessary(value: number, options?: {newPageOffsetX?: number, newPageOffsetY?: number, marginBottom?: number}) {\n    this.pdf.currentPage.moveDown(value);\n    const top = this.pdf.currentPage.getY();\n    const left = this.pdf.currentPage.getX();\n    const marginBottom = options?.marginBottom || 0;\n    if (top < marginBottom) {\n      this.pdf.addPage();\n      const offsetX = options?.newPageOffsetX || 0;\n      const offsetY = options?.newPageOffsetY || 0;\n      this.pdf.currentPage.moveTo(left + offsetX, this.pdf.currentPage.getY() - offsetY);\n    }\n  }\n}\n\nexport class PDFTextBlock extends PDFBlock {\n  public text: string | any;\n  public font: PDFFont;\n  public fontBold: PDFFont;\n  public fontOblique: PDFFont;\n  public fontBoldOblique: PDFFont;\n  public fontSize: number = 14;\n  public fontSizeHeader: {[key: number]: number} = {\n    1: 32,\n    2: 26,\n    3: 18,\n    4: 16,\n    5: 14,\n    6: 14\n  };\n  public fontBoldHeader: {[key: number]: boolean} = {\n    1: true,\n    2: true,\n    3: true,\n    4: true,\n    5: true,\n    6: true\n  };\n  public lineHeight: number = 1.2;\n  public paragraphSpacing: number = 16;\n  public color: RGB | Grayscale | CMYK;\n  public maxWidth: 'auto' | number = 'auto';\n  public align: 'left' | 'center' | 'right' = 'left';\n\n  private currentColor: RGB | Grayscale | CMYK;\n\n  private paragraphs: Array<PDFTextBlockParagraph> = [];\n\n  constructor(pdf: PDF) {\n    super(pdf);\n    this.font = this.pdf.currentFont;\n    this.fontBold = this.pdf.currentFontBold;\n    this.fontOblique = this.pdf.currentFontOblique;\n    this.fontBoldOblique = this.pdf.currentFontBoldOblique;\n    this.color = this.pdf.currentTextColor;\n  }\n\n  /* TODO: underline */\n  /* TODO: text-align */\n\n  public apply() {\n    if (this.text && typeof this.text !== 'string' && this.text.toString) {\n      this.text = this.text.toString();\n    }\n    if (!this.text) {\n      return;\n    }\n\n    this.currentColor = this.color;\n\n    const x = this.x || this.pdf.currentPage.getX();\n    const y = this.y || this.pdf.currentPage.getY();\n    \n    this.pdf.currentPage.moveTo(x, y);\n    const autoMaxWidth = this.pdf.pageWidth - x - this.pdf.marginRight;\n    const maxWidth = this.maxWidth === 'auto'\n      ? autoMaxWidth\n      : Math.min(this.maxWidth, autoMaxWidth);\n\n    const lex: any = marked.lexer(this.text, {smartypants: false});\n\n    for (let block of lex) {\n      if (block.type === 'paragraph' || block.type === 'heading') {\n        const fontSize = block.type === 'heading' ? this.fontSizeHeader[block.depth] : this.fontSize;\n        let paragraph: PDFTextBlockParagraph = [];\n        for (let token of block.tokens) {\n          const tokenText = token.text.replace(/[\\n\\r]/gm, \" (new-line) \");\n          const words = tokenText.split(' ');\n          const isBold = block.type === 'heading' ? this.fontBoldHeader[block.depth] : token.type === 'strong';\n          const isOblique = token.type === 'em';\n\n          let font = this.font;\n          if (isBold && isOblique) {\n            font = this.fontBoldOblique;\n          } else if (isBold) {\n            font = this.fontBold;\n          } else if (isOblique) {\n            font = this.fontOblique;\n          }\n\n          for (let word of words) {\n            const index = word.indexOf(\"\\n\");\n            if (index === 0 || word === '(new-line)') {\n              const newLineWord: PDFTextBlockWord = {\n                type: 'new-line',\n                text: '',\n                width: 0,\n                height: 0,\n                font: font,\n                fontSize: fontSize,\n                color: this.currentColor\n              }\n              paragraph.push(newLineWord);\n              continue;\n            }\n            if (word === '') {\n              continue;\n            }\n            \n            word = word.replace(/&#39;/g, `'`).replace(/&quot;/g, '\"');\n            const colorMatches = (word as string).match(/\\(color:([0-9,.]+)\\)/)\n            if (colorMatches) {\n              if (colorMatches[1] === '0') {\n                this.currentColor = this.color;\n              } else {\n                const newColor = colorMatches[1].split(',');\n                this.currentColor = rgb(parseFloat(newColor[0]), parseFloat(newColor[1]), parseFloat(newColor[2]));\n              }\n              continue;\n            }\n            const text = this.align === 'right' ? ` ${word}` : `${word} `\n            const pdfWord: PDFTextBlockWord = {\n              type: 'word',\n              text: text,\n              width: 0,\n              height: 0, \n              font: font,\n              fontSize: fontSize,\n              color: this.currentColor\n            };\n            pdfWord.width = font.widthOfTextAtSize(pdfWord.text, pdfWord.fontSize);\n            pdfWord.height = font.heightAtSize(pdfWord.fontSize);\n            paragraph.push(pdfWord);\n          }\n        }\n        this.paragraphs.push(paragraph);\n      }\n    }\n\n    let currentWidth = 0;\n    let currentWords: Array<PDFTextBlockWord> = [];\n    let addSpacing = false;\n    for (let paragraph of this.paragraphs) {\n      currentWords = [];\n      currentWidth = 0;\n      for (let word of paragraph) {\n        if (word.text === ' ') {\n          continue;\n        }\n        if (word.type === 'new-line') {\n          this.writeWords(x, currentWords);\n          currentWords = [];\n          currentWidth = 0;\n          continue;\n        }\n        if (currentWords.length === 0) {\n          currentWords.push(word);\n          currentWidth = word.width;\n          continue;\n        }\n        // check if we can add one more word\n        if (currentWidth + word.width < maxWidth) {\n          currentWords.push(word);\n          currentWidth += word.width;\n        } else {\n          // write the current word set and start again\n          if (addSpacing) {\n            this.moveDown(this.paragraphSpacing);\n            addSpacing = false;\n          }\n          this.writeWords(x, currentWords);\n          currentWords = [word];\n          currentWidth = word.width;\n        }\n      }\n      if (addSpacing) {\n        this.moveDown(this.paragraphSpacing);\n      }\n      this.writeWords(x, currentWords);\n      addSpacing = true;\n    }\n\n    this.moveDown(this.paragraphSpacing);\n  }\n\n  private writeWords(x: number, words: Array<PDFTextBlockWord>) {\n    if (words.length === 0) {\n      return;\n    }\n    const maxHeight = Math.max(...words.map(w => w.height));\n    this.moveDown(maxHeight * this.lineHeight);\n    let left = x;\n    // TODO: here we can adjust to align right\n    for (let word of words) {\n      this.pdf.currentPage.drawText(word.text, {\n        font: word.font,\n        size: word.fontSize,\n        color: word.color,\n        x: left\n      });\n      left += word.width;\n    }\n  }\n\n  private moveDown(height: number) {\n    this.moveDownAndAddPageIfNecessary(height, {newPageOffsetY: height, marginBottom: this.pdf.marginBottom});\n  }\n}\n\nexport type PDFTextBlockParagraph = Array<PDFTextBlockWord>;\n\nexport interface PDFTextBlockWord {\n  type: 'word' | 'new-line';\n  text: string;\n  width: number; \n  height: number; \n  font: PDFFont;\n  fontSize: number;\n  color: RGB | Grayscale | CMYK; \n}"]}