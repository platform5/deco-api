{"version":3,"file":"notification-email-service.js","sourceRoot":"","sources":["../../src/helpers/notification-email-service.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AACxB,2BAAgE;AAChE,sEAAoC;AACpC,4DAAoC;AAMpC,8CAAsB;AACtB,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,uCAAuC,CAAC,CAAC;AAWtE,MAAa,wBAAwB;IAArC;QAIU,sBAAiB,GAAY,KAAK,CAAC;QACnC,mBAAc,GAAY,IAAI,CAAC;IAoIzC,CAAC;IAlIC,MAAM,CAAC,aAAa,CAAC,GAAa;QAChC,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,CAAC,GAAG,CAAC,cAAc;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC9D,IAAI,CAAC,GAAG,CAAC,cAAc;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC9D,IAAI,CAAC,GAAG,CAAC,cAAc;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC9D,IAAI,CAAC,GAAG,CAAC,kBAAkB;YAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACtE,IAAI,CAAC,GAAG,CAAC,kBAAkB;YAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACtE,IAAI,CAAC,GAAG,CAAC,mBAAmB;YAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAExE,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAEnD,IAAI,YAAY,GAAG,IAAI,wBAAwB,EAAE,CAAC;QAClD,YAAY,CAAC,eAAe,CAAC;YAC3B,IAAI,EAAE,GAAG,CAAC,cAAc;YACxB,IAAI,EAAE,GAAG,CAAC,cAAc;YACxB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE;gBACJ,IAAI,EAAE,GAAG,CAAC,cAAc;gBACxB,IAAI,EAAE,GAAG,CAAC,kBAAkB;aAC7B;SACF,CAAC,CAAC;QACH,YAAY,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,kBAAkB,MAAM,GAAG,CAAC,mBAAmB,GAAG,CAAC;QAC/E,OAAO,YAAY,CAAC;IACtB,CAAC;IAEM,eAAe,CAAC,OAAkD;QACvE,IAAI,CAAC,WAAW,GAAG,oBAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAEM,IAAI,CAAC,UAAgE,EAAE,YAAoB,EAAG,IAAS,EAAE,mBAA4C,IAAI,EAAE,cAA4B,EAAE;;QAC9L,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;QACnG,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;QAE7F,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CAAC;QAElD,UAAU,GAAG,GAAG,KAAK,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE,CAAC;QAChF,MAAM,OAAO,GAAG,OAAA,gBAAgB,0CAAE,OAAO,KAAI,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;QACtF,MAAM,SAAS,GAAG,OAAA,gBAAgB,0CAAE,QAAQ,KAAI,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAErF,IAAI,OAAO,GAAQ;YACjB,OAAO,EAAE;gBACP,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,WAAW;aACZ;YACD,KAAK,EAAE,IAAI;YACX,cAAc,EAAE;gBACd,iBAAiB,EAAE,IAAI;gBACvB,YAAY,EAAE;oBACZ,UAAU,EAAE,OAAO;iBACpB;aACF;YACD,SAAS,EAAE,IAAI,CAAC,WAAW;YAC3B,OAAO,EAAE,IAAI,CAAC,iBAAiB;YAC/B,IAAI,EAAE,IAAI,CAAC,cAAc;YACzB,KAAK,EAAE;gBACL,IAAI,EAAE,SAAS;aAChB;YACD,aAAa,EAAE,GAAG,KAAK,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI;SACzD,CAAC;QAEF,IAAI,eAAe,GAAiB,OAAO,CAAC,OAAO,EAAE,CAAC;QACtD,MAAM,sBAAsB,GAAG,gBAAgB,IAAI,gBAAgB,CAAC,OAAO,IAAI,gBAAgB,CAAC,IAAI,CAAC;QACrG,IAAI,YAAY,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,sBAAsB,EAAE;YAC/E,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC;YACpC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACjC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;aAC3B;iBAAM,IAAI,IAAI,CAAC,MAAM,EAAE;gBACtB,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;aACtB;YACD,eAAe,GAAG,iBAAa,CAAC,eAAe,CAAC,EAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,YAAY,EAAC,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC1G,IAAI,CAAC,QAAQ;oBAAE,OAAO;gBACtB,IAAI,QAAQ,GAAI,QAAQ,CAAC,OAA2B,CAAC;gBACrD,IAAI,KAAK,GAAI,QAAQ,CAAC,IAAwB,CAAC;gBAC/C,IAAI,KAAK,GAAI,QAAQ,CAAC,IAAwB,CAAC;gBAC/C,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;oBAChC,gBAAgB,GAAG;wBACjB,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC;wBACzB,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC;wBACnB,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC;qBACpB,CAAA;iBACF;YACH,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE;YAC/B,IAAI,sBAAsB,EAAE;gBAC1B,IAAI,iBAAiB,GAAoD,gBAAmE,CAAC;gBAC7I,OAAO,CAAC,MAAM,GAAG,CAAC,IAAY,EAAE,MAAW,EAAmB,EAAE;oBAC9D,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,iBAAiB,CAAC,OAAO,EAAE;wBAChE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;4BACrC,MAAM,gBAAgB,GAAG,aAAG,CAAC,OAAO,CAAE,iBAAiB,CAAC,OAAkB,CAAC,CAAC;4BAC5E,IAAI,IAAI,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;4BACpC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBACzD,CAAC,CAAC,CAAC;qBACJ;oBACD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,iBAAiB,CAAC,IAAI,EAAE;wBAC1D,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;4BACrC,MAAM,gBAAgB,GAAG,aAAG,CAAC,OAAO,CAAE,iBAAiB,CAAC,IAAe,CAAC,CAAC;4BACzE,IAAI,IAAI,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;4BACpC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBACzD,CAAC,CAAC,CAAC;qBACJ;oBACD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;wBAChC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;4BACrC,MAAM,gBAAgB,GAAG,aAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;4BAC7D,IAAI,IAAI,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC;4BACpC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;wBACzD,CAAC,CAAC,CAAC;qBACJ;oBACD,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC7B,CAAC,CAAA;aACF;YAGD,IAAI,KAAK,GAAG,IAAI,yBAAK,CAAC,OAAO,CAAC,CAAC;YAC/B,OAAO,KAAK,CAAC,IAAI,CAAC;gBAChB,QAAQ,EAAE,YAAY;gBACtB,OAAO,EAAE;oBACP,EAAE,EAAE,UAAU;iBACf;gBACD,MAAM,EAAE,IAAI;aACb,CAAC,CAAC,IAAI,CAAC,CAAC,KAAU,EAAE,EAAE;gBACrB,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;gBACxB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrB,MAAM,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAEF;AAzID,4DAyIC;AAED,IAAI,YAAY,GAAG,IAAI,wBAAwB,EAAE,CAAC;AAYzC,oCAAY;AAXrB,YAAY,CAAC,eAAe,CAAC;IAC3B,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE;IACjC,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,GAAG;IACtD,MAAM,EAAE,KAAK;IACb,IAAI,EAAE;QACJ,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE;QACjC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,EAAE;KACtC;CACF,CAAC,CAAC;AACH,YAAY,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,EAAE,CAAC","sourcesContent":["import path from 'path';\nimport { TemplateModel, StringStringMap,  AppModel } from '../';\nimport Email from 'email-templates';\nimport nodemailer from 'nodemailer';\nimport { Transporter } from 'nodemailer';\nimport SMTPTransport from 'nodemailer/lib/smtp-transport';\nimport SMTPPool from 'nodemailer/lib/smtp-pool';\nimport Mail from 'nodemailer/lib/mailer';\nimport { Attachment } from 'nodemailer/lib/mailer';\nimport pug from 'pug';\nlet debug = require('debug')('app:helpers:notification:emailService');\n\nexport interface TemplateOverride {\n  rootPath?: string;\n  cssPath?: string;\n  subject?: string;\n  html?: string;\n  text?: string;\n  sms?: string;\n}\n\nexport class NotificationEmailService {\n  \n  private transporter?: Transporter;\n  public from?: string;\n  private enablePreviewMode: boolean = false;\n  private realySendEmail: boolean = true;\n\n  static serviceForApp(app: AppModel): NotificationEmailService {\n    if (!app) throw new Error('Missing app');\n    if (!app.smtpConfigHost) throw new Error('SMTP Host unknown');\n    if (!app.smtpConfigPort) throw new Error('SMTP Port unknown');\n    if (!app.smtpConfigUser) throw new Error('SMTP User unknown');\n    if (!app.smtpConfigPassword) throw new Error('SMTP Password unknown');\n    if (!app.smtpConfigFromName) throw new Error('SMTP fromName unknown');\n    if (!app.smtpConfigFromEmail) throw new Error('SMTP fromEmail unknown');\n\n    let secure = (app.smtpConfigSecure) ? true : false;\n\n    let emailService = new NotificationEmailService();\n    emailService.initTransporter({\n      host: app.smtpConfigHost,\n      port: app.smtpConfigPort,\n      secure: secure, // use SSL\n      auth: {\n        user: app.smtpConfigUser,\n        pass: app.smtpConfigPassword\n      }\n    });\n    emailService.from = `\"${app.smtpConfigFromName}\" <${app.smtpConfigFromEmail}>`;\n    return emailService;\n  }\n\n  public initTransporter(options:  SMTPTransport.Options | SMTPPool.Options) {\n    this.transporter = nodemailer.createTransport(options);\n  }\n\n  public send(recipients: string | Mail.Address | Array<string | Mail.Address>, templatePath: string,  data: any, templateOverride: TemplateOverride | null = null, attachments: Attachment[] = []): Promise<any> {\n    if (!this.transporter) throw new Error('You must create a transporter before you can send emails');\n    if (!this.from) throw new Error('You must define the from property before to send an email');\n\n    const env = process.env.NODE_ENV || 'development';\n\n    recipients = env === 'production' ? recipients : process.env.DEV_EMAIL_TO || '';\n    const cssPath = templateOverride?.cssPath || path.join(__dirname, '../../emails/css');\n    const emailPath = templateOverride?.rootPath || path.join(__dirname, '../../emails');\n\n    let options: any = {\n      message: {\n        from: this.from,\n        attachments\n      },\n      juice: true,\n      juiceResources: {\n        preserveImportant: true,\n        webResources: {\n          relativeTo: cssPath\n        }\n      },\n      transport: this.transporter,\n      preview: this.enablePreviewMode,\n      send: this.realySendEmail,\n      views: {\n        root: emailPath\n      },\n      subjectPrefix: env === 'production' ? false : `${env}: `\n    };\n\n    let templatePromise: Promise<any> = Promise.resolve();\n    const shouldOverrideTemplate = templateOverride && templateOverride.subject && templateOverride.html;\n    if (templatePath && data && data.app && data.app._id && !shouldOverrideTemplate) {\n      let locale = data.app.defaultLocale;\n      if (data.user && data.user.locale) {\n        locale = data.user.locale;\n      } else if (data.locale) {\n        locale = data.locale;\n      }\n      templatePromise = TemplateModel.getOneWithQuery({appId: data.app._id, key: templatePath}).then((template) => {\n        if (!template) return;\n        let _subject = (template.subject as StringStringMap);\n        let _html = (template.html as StringStringMap);\n        let _text = (template.text as StringStringMap);\n        if (_subject && _subject[locale]) {\n          templateOverride = {\n            subject: _subject[locale],\n            html: _html[locale],\n            text: _text[locale],\n          }\n        }\n      });\n    }\n    \n    return templatePromise.then(() => {\n      if (shouldOverrideTemplate) {\n        let _templateOverride: {subject: string, html: string, text?: string} = (templateOverride as {subject: string, html: string, text?: string});\n        options.render = (view: string, locals: any): Promise<string> => {\n          if (view.indexOf('/subject') !== -1 && _templateOverride.subject) {\n            return new Promise((resolve, reject) => {\n              const compiledFunction = pug.compile((_templateOverride.subject as string));\n              let html = compiledFunction(locals);\n              email.juiceResources(html).then(resolve).catch(reject);\n            });\n          }\n          if (view.indexOf('/text') !== -1 && _templateOverride.text) {\n            return new Promise((resolve, reject) => {\n              const compiledFunction = pug.compile((_templateOverride.text as string));\n              let html = compiledFunction(locals);\n              email.juiceResources(html).then(resolve).catch(reject);\n            });\n          }\n          if (view.indexOf('/html') !== -1) {\n            return new Promise((resolve, reject) => {\n              const compiledFunction = pug.compile(_templateOverride.html);\n              let html = compiledFunction(locals);\n              email.juiceResources(html).then(resolve).catch(reject);\n            });\n          }\n          return Promise.resolve('');\n        }\n      }\n  \n  \n      let email = new Email(options);\n      return email.send({\n        template: templatePath,\n        message: {\n          to: recipients\n        },\n        locals: data,\n      }).then((value: any) => {\n        return value;\n      }).catch((error: Error) => {\n        console.error(error);\n        throw error;\n      });\n    });\n  }\n\n}\n\nlet emailService = new NotificationEmailService();\nemailService.initTransporter({\n  host: process.env.MAIL_HOST || '',\n  port: parseInt(process.env.MAIL_PORT || '', 10) || 587,\n  secure: false, // use SSL\n  auth: {\n    user: process.env.MAIL_USER || '',\n    pass: process.env.MAIL_PASSWORD || ''\n  }\n});\nemailService.from = process.env.MAIL_FROM || '';\n\nexport { emailService };"]}