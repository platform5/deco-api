{"version":3,"file":"policy.js","sourceRoot":"","sources":["../../src/decorators/policy.ts"],"names":[],"mappings":";;AAEA,MAAa,YAAY;CAIxB;AAJD,oCAIC;AAkCY,QAAA,WAAW,GAAG,CAAC,SAAyC,EAAE,SAA4B,EAAE,EAAE,EAAE;IACvG,OAAO,UAAU,MAAW;QAC1B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO;YAAE,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,EAAE,CAAC;QAC7D,IAAI,SAAS,GAAG,GAAG,SAAS,QAAQ,CAAC;QACrC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;IAC/C,CAAC,CAAA;AACH,CAAC,CAAA;AAEY,QAAA,cAAc,GAAG,CAAC,SAA0C,EAAE,QAAyB,EAAE,EAAE;IACtG,OAAO,UAAU,MAAW;QAC1B,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO;YAAE,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,EAAE,CAAC;QAC7D,IAAI,SAAS,GAAG,GAAG,SAAS,QAAQ,CAAC;QACrC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;IACjD,CAAC,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { ModelOperation } from '../';\n\nexport class QueryByModel {\n  model: string;\n  query: any;\n  compareModelWithProperty: string;\n}\n\nexport interface ModelAccessPolicy {\n  public?: boolean | string;\n  roles?: Array<string>;\n  excludeRoles?: Array<string>;\n  userIdByProperty?: string | Array<string>;\n  queryByModel?: QueryByModel | Array<QueryByModel>;\n}\n\nexport interface IOPolicy {\n  context: 'userIdInProperty' | 'roles' | '*',\n  contextValue?: string | Array<string>;\n  properties: '*' | 'extractedFrom' | Array<string>;\n  propertiesExtractedFrom?: string;\n  operation: 'include' | 'exclude';\n  ignoreOnPost?: boolean;\n}\n\nexport interface Policy {\n  globalModelPolicy?: ModelAccessPolicy;\n  readModelPolicy?: ModelAccessPolicy;\n  writeModelPolicy?: ModelAccessPolicy;\n  getAllPolicy?: ModelAccessPolicy;\n  getOnePolicy?: ModelAccessPolicy;\n  postPolicy?: ModelAccessPolicy;\n  putPolicy?: ModelAccessPolicy;\n  deletePolicy?: ModelAccessPolicy;\n\n  globalIOPolicy?: Array<IOPolicy>;\n  inputPolicy?: Array<IOPolicy>;\n  outputPolicy?: Array<IOPolicy>;\n}\n\nexport const modelPolicy = (operation: ModelOperation | 'globalModel', policy: ModelAccessPolicy = {}) => {\n  return function (target: any): void {\n    if (!target.prototype._policy) target.prototype._policy = {};\n    let policyKey = `${operation}Policy`;\n    target.prototype._policy[policyKey] = policy;\n  }\n}\n\nexport const propertyPolicy = (operation: 'input' | 'output' | 'globalIO', policies: Array<IOPolicy>) => {\n  return function (target: any): void {\n    if (!target.prototype._policy) target.prototype._policy = {};\n    let policyKey = `${operation}Policy`;\n    target.prototype._policy[policyKey] = policies;\n  }\n}"]}