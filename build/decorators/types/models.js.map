{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/decorators/types/models.ts"],"names":[],"mappings":"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","sourcesContent":["import { UpdateQuery } from './../../helpers/update-query';\nimport { TypeDecorator } from './type-decorator';\nimport { ObjectId } from 'mongodb';\nimport { Model } from '../model';\nimport { Query } from '../../helpers/query';\nimport { decorators } from 'aurelia-metadata';\nlet debug = require('debug')('deco-api:decorators:types:models');\nexport let modelDecorator = new TypeDecorator('model');\n\nexport interface DetectedModelRelation {\n  fromModel: typeof Model;\n  toModel: typeof Model;\n  key: string;\n  type: 'model' | 'models';\n}\n\nexport let relations: Array<DetectedModelRelation> = [];\n\nmodelDecorator.defaultOptions = {\n  model: 'not-set'\n}\nmodelDecorator.optionsHook = (options: any, target: any, key: string) => {\n  if (options.biDirectional && options.model !== 'self') {\n    throw new Error('options.biDirectional is only supported on self relations');\n  }\n  if (options.crossDirectional && options.model !== 'self') {\n    throw new Error('options.crossDirectional is only supported on self relations');\n  }\n  if (options && options.model === 'self') options.model = target.constructor;\n  return options;\n}\nmodelDecorator.postConfigHook = (options: any, target: any, key: string) => {\n  if (options && typeof options.model === 'function' && options.model.getAll) {\n    relations.push({\n      fromModel: target.constructor,\n      toModel: options.model,\n      key: key,\n      type: 'model'\n    });\n  }\n}\nexport let inputModel = (value: any, options: any, key: string) => {\n  if (value === '') value = null;\n  if (value === 'null') value = null;\n  if (value === 'undefined') value = undefined;\n  if (options.model === 'not-set') throw new Error(`Model not set in key (${key})`);\n  if (options.model !instanceof Model) throw new Error('options.model must be a Model instance');\n  if (typeof value === 'string') {\n    try {\n      value = new ObjectId(value);\n    } catch (error) {\n      throw new Error(`${value} is an invalid ObjectId`);\n    }\n  }\n  return value;\n};\nmodelDecorator.input = (key: string, value: any, options: any, element: any, target: any) => {\n  return Promise.resolve(inputModel(value, options, key));\n};\nmodelDecorator.output = (key: string, value: any, options: any, element: any, target: any) => {\n  if (options.model === 'not-set') return Promise.reject(new Error(`Model not set in (${key})`));\n  if (options.model !instanceof Model) return Promise.reject(new Error('options.model must be a Model instance'));\n  if (value && typeof value !== 'string' && value.toString) return Promise.resolve(value.toString());\n  return Promise.resolve(value);\n};\nexport let validateModel = async (value: any, options: any) => {\n  if (options.model === 'not-set' || !options.model) return Promise.reject(new Error(`Model not set in (${options.key})`));\n  if (options.model !instanceof Model) throw new Error('options.model must be a Model instance');\n\n  if (value === undefined || value === null) return true;\n\n  // fetch the model relation\n  return options.model.getOneWithId(value).then((element: Model) => {\n    if (element) return true;\n    return false;\n  });\n};\nmodelDecorator.validate = (value: any, obj: any, options: any) => {\n  return validateModel(value, options);\n};\n\nexport const model = modelDecorator.decorator();\n\nexport let modelsDecorator = new TypeDecorator('models');\nmodelsDecorator.defaultOptions = {\n  model: 'not-set'\n}\nmodelsDecorator.optionsHook = (options: any, target: any, key: string) => {\n  if (options && options.model === 'self') options.model = target.constructor;\n  return options;\n}\nmodelsDecorator.postConfigHook = (options: any, target: any, key: string) => {\n  if (options && (options.model instanceof Model)) {\n    relations.push({\n      fromModel: target,\n      toModel: options.model,\n      key: key,\n      type: 'models'\n    });\n  }\n}\nexport let inputModels = (value: any, options: any, key: string) => {\n  if (value === '') value = null;\n  if (value === 'null') value = null;\n  if (value === 'undefined') value = undefined;\n  if (options.model === 'not-set') return Promise.reject(new Error(`Model not set in (${key})`));\n  if (options.model !instanceof Model) return Promise.reject(new Error('options.model must be a Model instance'));\n\n  if (value === 'null' || value === null || value === undefined || value === 'undefined') value = [];\n\n  if (typeof value === 'string') value = value.split(',');\n\n  if (Array.isArray(value)) {\n    try {\n      let newValue = [];\n      for (let item of value) {\n        if (typeof item === 'string') {\n          item = new ObjectId(item);\n        }\n        newValue.push(item);\n      }\n      value = newValue;\n    } catch (error) {\n      return Promise.reject(`${value} contains an invalid ObjectId`);\n    }\n  }\n  return Promise.resolve(value);\n}\nmodelsDecorator.input = (key: string, value: any, options: any, element: any, target: any) => {\n  return inputModels(value, options, key);\n};\nmodelsDecorator.output = (key: string, value: any, options: any, element: any, target: any) => {\n  if (options.model === 'not-set') return Promise.reject(new Error(`Model not set in (${key})`));\n  if (options.model === 'self') options.model = target;\n  if (options.model !instanceof Model) return Promise.reject(new Error('options.model must be a Model instance'));\n  if (value === null) value = [];\n  if (value && Array.isArray(value)) {\n    for (let item of value) {\n      if (item && typeof item !== 'string' && item.toString) item = item.toString();\n    }\n  }\n  return Promise.resolve(value);\n};\nexport let validateModels = async (value: any, options: any) => {\n  if (options.model === 'not-set' || !options.model) return Promise.reject(new Error(`Model not set in (${options.key})`));\n  if (options.model !instanceof Model) return Promise.reject(new Error('options.model must be a Model instance'));\n\n  if (value === undefined || value === null || value === []) return true;\n\n  // fetch the model relations\n  return options.model.getAll(new Query({_id: {$in: value}})).then((elements: Array<Model>) => {\n    if (elements.length === value.length) return true;\n    return false;\n  });\n};\nmodelsDecorator.validate = (value: any, obj: any, options: any) => {\n  return validateModels(value, options);\n};\nmodelsDecorator.toDocument = async (updateQuery: UpdateQuery, key: string, value: any, operation: 'insert' | 'update' | 'upsert', options: any, element: any, target: any) => {\n  const newValue: ObjectId[] = Array.isArray(value) ? value : [];\n  // const originalValue: ObjectId[] = Array.isArray(element[key]) ? element[key] : [];\n\n  if (options.crossDirectional) {\n    const model = (options.model as typeof Model);\n    if (operation !== 'insert' && value === undefined || (Array.isArray(value) && value.length === 0)) {\n      // remove this item from any relationship on this key\n      const query: any = {};\n      query[key] = element._id;\n      const pullQuery = Object.assign({}, query);\n      const currentRelatedModels = await model.getAll(new Query(query));\n      await model.deco.db.collection(model.deco.collectionName).updateMany({_id: {$in: currentRelatedModels.map(i => i._id)}}, {$pull: pullQuery});\n    } else if (Array.isArray(value)) {\n      // first thing: compare which relationships have been removed in this operation\n      // for this we compare between the value requested as new value and the\n      // currently stored value\n      if (operation === 'insert' && !element._id) {\n        element._id = new ObjectId();\n      }\n      const originalValue = element[`_original${key}`] || [];\n      const idsNotToAdd: string[] = originalValue.map((id: any) => id.toString());\n      // must fetch all related elements and check if we must add some more ids into the relation\n      // for this we only query \"new\" elements that were not in the relationship before\n      // also we will not add any \n      const valuesString = value.map(v => v.toString());\n      const related = await model.deco.db.collection(model.deco.collectionName).find({_id: {$in: value, $nin: originalValue}}).toArray();\n      for (const r of related) {\n        if (Array.isArray(r[key])) {\n          for (const rr of r[key])  {\n            if (!valuesString.includes(rr.toString()) && !idsNotToAdd.includes(rr.toString())) {\n              valuesString.push(rr.toString());\n              value.push(rr);\n            }\n          }\n        }\n      } \n      // value is now a ObjectId[] with all valid relationships\n      if (!valuesString.includes(element._id.toString())) {\n        valuesString.push(element._id.toString());\n        value.push(element._id);\n      }\n      const setQuery: any = {};\n      setQuery[key] = value;\n      const unsetMatch: any = {_id: {$nin: value}};\n      unsetMatch[key] = {$in: value};\n      const unsetQuery: any = {};\n      unsetQuery[key] = [];\n      await model.deco.db.collection(model.deco.collectionName).updateMany({_id: {$in: value}}, {$set: setQuery});\n      // and remove all these values from any other documents that might be linked to it\n      await model.deco.db.collection(model.deco.collectionName).updateMany(unsetMatch, {$set: unsetQuery});\n      updateQuery.set(key, value);\n    }\n  }\n\n\n  if (value === undefined) {\n    // no-value, unlink everything\n    if (operation === 'insert') {\n      // if no value when inserting, not a big deal\n      return;\n    } else {\n      if (options.biDirectional) {\n        // if no value when updating, remove all links\n        const query: any = {};\n        query[key] = element._id;\n        const pullQuery = Object.assign({}, query);\n        const model = (options.model as typeof Model);\n        const currentRelatedModels = await model.getAll(new Query(query));\n        await model.deco.db.collection(model.deco.collectionName).updateMany({_id: {$in: currentRelatedModels.map(i => i._id)}}, {$pull: pullQuery});\n      }\n      updateQuery.unset(key);\n    }\n  } else {\n    // when we have a value we must update all links\n    if (options.biDirectional) {\n      if (!element._id) {\n        element._id = new ObjectId(); // when inserting we might not yet have an _id, let's make sure we have one\n      }\n      // remove all non-relevant links\n      const query: any = {};\n      query[key] = element._id;\n      const pullQuery = Object.assign({}, query);\n      query._id = {$nin: newValue};\n      const model = (options.model as typeof Model);\n      const relatedModelsToUnlink = await model.getAll(new Query(query));\n      await model.deco.db.collection(model.deco.collectionName).updateMany({_id: {$in: relatedModelsToUnlink.map(i => i._id)}}, {$pull: pullQuery});\n      // add all relevant links\n      const query2: any = {};\n      query2[key] = {$nin: [element._id]};\n      query2._id = {$in: newValue};\n      const addQuery: any = {};\n      addQuery[key] = element._id;\n      const relatedModelsToLink = await model.getAll(new Query(query2));\n      await model.deco.db.collection(model.deco.collectionName).updateMany({_id: {$in: relatedModelsToLink.map(i => i._id)}}, {$addToSet: addQuery});\n    }\n    updateQuery.set(key, value);\n  }\n  return Promise.resolve();\n};\n\nasync function updateRelatedModel(relatedModel: typeof Model, relatedModelId: ObjectId, elementId: ObjectId, operation: 'add' | 'remove'): Promise<void> {\n  return;\n}\n\nexport const models = modelsDecorator.decorator();"]}