{"version":3,"file":"type-decorator.js","sourceRoot":"","sources":["../../../src/decorators/types/type-decorator.ts"],"names":[],"mappings":";;AAEA,0BAA0B;AAC1B,8CAA8C;AAC9C,6BAA2B;AAC3B,2DAAqD;AACrD,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,0CAA0C,CAAC,CAAC;AAEzE,MAAa,aAAa;IAaxB,YAAY,IAAY;QAVxB,mBAAc,GAAQ,EAAE,CAAC;QACzB,gBAAW,GAAY,KAAK,CAAC;QAOrB,8BAAyB,GAAG,KAAK,CAAC;QAGxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,CAAC,GAAW,EAAE,KAAU,EAAE,OAAY,EAAE,OAAY,EAAE,MAAW,EAAE,EAAE;YAChF,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,CAAC,GAAW,EAAE,KAAU,EAAE,OAAY,EAAE,OAAY,EAAE,MAAW,EAAE,EAAE;YACjF,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAW,EAAE,KAAU,EAAE,OAAY,EAAE,OAAY,EAAE,MAAW,EAAE,EAAE;YACnF,IAAI,OAAO,KAAK,KAAK,QAAQ;gBAAE,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC7D,IAAI,KAAK,CAAC,QAAQ,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,UAAU;gBAAE,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrG,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,CAAC,WAAwB,EAAE,GAAW,EAAE,KAAU,EAAE,SAAyC,EAAE,OAAY,EAAE,OAAY,EAAE,MAAW,EAAE,EAAE;YAC1J,IAAI,KAAK,KAAK,SAAS,EAAE;gBACvB,IAAI,SAAS,KAAK,QAAQ,EAAE;oBAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;iBAC1B;qBAAM;oBACL,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACxB;aACF;iBAAM;gBACL,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aAC7B;YACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,CAAC,KAAU,EAAE,GAAQ,EAAE,OAAY,EAAE,EAAE;YACrD,OAAO,IAAI,CAAC;QACd,CAAC,CAAA;IACH,CAAC;IAED,SAAS;QACP,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;YACnC,IAAI,CAAC,0BAA0B,EAAE,CAAC;YAClC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;SACvC;QAED,OAAO,CAAC,eAAqB,EAAE,GAAY,EAAE,UAA+B,EAAO,EAAE;YACnF,IAAI,OAAO,GAAG,EAAE,CAAC;YACjB,IAAI,GAAG,EAAE;gBACP,0BAA0B;gBAC1B,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;aACvD;iBAAM;gBACL,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;aACxE;YAED,IAAI,IAAI,GAAG,CAAC,MAAW,EAAE,GAAW,EAAE,UAA+B,EAAc,EAAE;gBACnF,IAAI,UAAU;oBAAE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAC3C,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;oBAClB,MAAM,CAAC,MAAM,GAAG,iBAAiB,EAAE,CAAC;iBACrC;gBACD,IAAI,CAAC,MAAM,CAAC,aAAa;oBAAE,MAAM,CAAC,aAAa,GAAG,EAAE,CAAC;gBACrD,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;gBAC1B,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;gBACnE,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC1C,IAAI,UAAU;oBAAE,OAAO,UAAU,CAAC;YACpC,CAAC,CAAC;YAEF,IAAI,GAAG,EAAE;gBACP,OAAO,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;aAC/C;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;QACH,CAAC,CAAA;IACH,CAAC;IAEM,WAAW,CAAC,OAAY,EAAE,MAAW,EAAE,GAAQ;QACpD,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,cAAc,CAAC,OAAY,EAAE,MAAW,EAAE,GAAQ;QACvD,OAAO;IACT,CAAC;IAEO,0BAA0B;QAChC,oCAAe,CAAC,UAAU,CACxB,QAAQ,IAAI,CAAC,IAAI,EAAE,EACnB,IAAI,CAAC,QAAQ,EACb,gDAAgD,IAAI,CAAC,IAAI,GAAG,CAC7D,CAAC;IACJ,CAAC;CAEF;AA9FD,sCA8FC;AAED,4CAA6D;AAE7D,SAAS,iBAAiB;IACxB,OAAO;QACL,GAAG,EAAE,oBAAW;QAChB,UAAU,EAAE,sBAAa;QACzB,UAAU,EAAE,sBAAa;QACzB,UAAU,EAAE,oBAAW;QACvB,UAAU,EAAE,oBAAW;KACxB,CAAC;AACJ,CAAC","sourcesContent":["import { StringTMap } from './../../interfaces/types';\nimport { UpdateQuery } from './../../helpers/update-query';\n// aurelia-validation tips\n// https://stackoverflow.com/a/49354106/437725\nimport 'aurelia-polyfills';\nimport { ValidationRules } from 'aurelia-validation';\nlet debug = require('debug')('deco-api:decorators:types:type-decorator');\n\nexport class TypeDecorator {\n\n  name: string;\n  defaultOptions: any = {};\n  requireDeco: boolean = false;\n  input: (key: string, value: any, options: any, element: any, target: any) => Promise<any>;\n  output: (key: string, value: any, options: any, element: any, target: any) => Promise<any>;\n  toString: (key: string, value: any, options: any, element: any, target: any) => Promise<string>;\n  toDocument: (updateQuery: UpdateQuery, key: string, value: any, operation: 'insert' | 'update' | 'upsert', options: any, element: any, target: any) => Promise<void>;\n  validate: (value: any, obj: any, options: any) => boolean | Promise<boolean>;\n\n  private customValidationRuleReady = false;\n\n  constructor(name: string) {\n    this.name = name;\n    this.input = (key: string, value: any, options: any, element: any, target: any) => {\n      return Promise.resolve(value);\n    };\n    this.output = (key: string, value: any, options: any, element: any, target: any) => {\n      return Promise.resolve(value);\n    };\n    this.toString = (key: string, value: any, options: any, element: any, target: any) => {\n      if (typeof value === 'string') return Promise.resolve(value);\n      if (value.toString && typeof value.toString === 'function') return Promise.resolve(value.toString());\n      return Promise.resolve('');\n    };\n    this.toDocument = (updateQuery: UpdateQuery, key: string, value: any, operation: 'insert' | 'update' | 'upsert', options: any, element: any, target: any) => {\n      if (value === undefined) {\n        if (operation === 'insert') {\n          return Promise.resolve();\n        } else {\n          updateQuery.unset(key);\n        }\n      } else {\n        updateQuery.set(key, value);\n      }\n      return Promise.resolve();\n    };\n    this.validate = (value: any, obj: any, options: any) => {\n      return true;\n    }\n  }\n\n  decorator() {\n    if (!this.customValidationRuleReady) {\n      this.createCustomValidationRule();\n      this.customValidationRuleReady = true;\n    }\n\n    return (optionsOrTarget?: any, key?: string, descriptor?: PropertyDescriptor): any => {\n      let options = {};\n      if (key) {\n        // used without parameters\n        options = Object.assign(options, this.defaultOptions);\n      } else {\n        options = Object.assign(options, this.defaultOptions, optionsOrTarget);\n      }\n\n      let deco = (target: any, key: string, descriptor?: PropertyDescriptor): void | any => {\n        if (descriptor) descriptor.writable = true;\n        if (!target._types) {\n          target._types = setBaseModelTypes();\n        }\n        if (!target._typesOptions) target._typesOptions = {};\n        target._types[key] = this;\n        target._typesOptions[key] = this.optionsHook(options, target, key);\n        this.postConfigHook(options, target, key);\n        if (descriptor) return descriptor;\n      };\n\n      if (key) {\n        return deco(optionsOrTarget, key, descriptor);\n      } else {\n        return deco;\n      }\n    }\n  }\n\n  public optionsHook(options: any, target: any, key: any) {\n    return options;\n  }\n\n  public postConfigHook(options: any, target: any, key: any): void {\n    return;\n  }\n\n  private createCustomValidationRule() {\n    ValidationRules.customRule(\n      `type:${this.name}`,\n      this.validate,\n      `The \\${$propertyName} property is not valid (${this.name})`\n    );\n  }\n\n}\n\nimport { idDecorator, dateDecorator } from '../types/basics';\n\nfunction setBaseModelTypes(): StringTMap<TypeDecorator> {\n  return {\n    _id: idDecorator,\n    _createdAt: dateDecorator,\n    _updatedAt: dateDecorator,\n    _createdBy: idDecorator,\n    _updatedBy: idDecorator\n  };\n}"]}