{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../src/decorators/types/metadata.ts"],"names":[],"mappings":";;AAAA,qDAAiD;AAEjD,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,oCAAoC,CAAC,CAAC;AAQxD,QAAA,aAAa,GAAG,CAAC,KAAU,EAAE,OAAY,EAAE,EAAE;IACtD,IAAI,KAAK,KAAK,MAAM;QAAE,KAAK,GAAG,SAAS,CAAC;IACxC,IAAI,KAAK,KAAK,WAAW;QAAE,KAAK,GAAG,SAAS,CAAC;IAC7C,IAAI,KAAK,KAAK,IAAI;QAAE,KAAK,GAAG,SAAS,CAAC;IACtC,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AACS,QAAA,gBAAgB,GAAG,CAAC,KAAU,EAAE,OAAY,EAAE,EAAE;IACzD,IAAI,KAAK,KAAK,IAAI;QAAE,OAAO,IAAI,CAAC;IAChC,IAAI,KAAK,KAAK,SAAS;QAAE,OAAO,IAAI,CAAC;IACrC,IAAI,KAAK,KAAK,MAAM;QAAE,OAAO,IAAI,CAAC;IAClC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IAExC,IAAI,WAAW,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAC3C,KAAK,IAAI,IAAI,IAAI,KAAK,EAAE;QACtB,IAAI,OAAO,IAAI,KAAK,QAAQ;YAAE,OAAO,KAAK,CAAC;QAC3C,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;YACpB,IAAI,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAAE,OAAO,KAAK,CAAC;SACnD;QACD,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS;YAAE,OAAO,KAAK,CAAC;QACzC,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS;YAAE,OAAO,KAAK,CAAC;KAC5C;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAA;AACU,QAAA,iBAAiB,GAAG,IAAI,8BAAa,CAAC,UAAU,CAAC,CAAC;AAC7D,yBAAiB,CAAC,KAAK,GAAG,CAAC,GAAW,EAAE,KAAU,EAAE,OAAY,EAAE,MAAW,EAAE,EAAE;IAC/E,OAAO,OAAO,CAAC,OAAO,CAAC,qBAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AACF,yBAAiB,CAAC,QAAQ,GAAG,CAAC,KAAU,EAAE,GAAQ,EAAE,OAAY,EAAE,EAAE;IAClE,OAAO,wBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1C,CAAC,CAAC;AACF,yBAAiB,CAAC,UAAU,GAAG,CAAC,WAAwB,EAAE,GAAW,EAAE,KAAU,EAAE,SAAyC,EAAE,OAAY,EAAE,OAAY,EAAE,MAAW,EAAE,EAAE;IACvK,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,MAAM,EAAE;QAC7D,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;KAC5B;SAAM;QACL,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC7B;IACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AAC3B,CAAC,CAAA;AACY,QAAA,QAAQ,GAAG,yBAAiB,CAAC,SAAS,EAAE,CAAC","sourcesContent":["import { TypeDecorator } from './type-decorator';\nimport { UpdateQuery } from './../../helpers/update-query';\nlet debug = require('debug')('deco-api:decorators:types:metadata');\n\nexport interface Metadata {\n  key: string;\n  value: any;\n  type?: string;\n}\n\nexport let inputMetadata = (value: any, options: any) => {\n  if (value === 'null') value = undefined;\n  if (value === 'undefined') value = undefined;\n  if (value === null) value = undefined;\n  return value;\n};\nexport let validateMetadata = (value: any, options: any) => {\n  if (value === null) return true;\n  if (value === undefined) return true;\n  if (value === 'null') return true;\n  if (!Array.isArray(value)) return false;\n\n  let allowedKeys = ['key', 'value', 'type'];\n  for (let data of value) {\n    if (typeof data !== 'object') return false;\n    let keys = Object.keys(data);\n    for (let key of keys) {\n      if (allowedKeys.indexOf(key) === -1) return false;\n    }\n    if (data.key === undefined) return false;\n    if (data.value === undefined) return false;\n  }\n\n  return true;\n}\nexport let metadataDecorator = new TypeDecorator('metadata');\nmetadataDecorator.input = (key: string, value: any, options: any, target: any) => {\n  return Promise.resolve(inputMetadata(value, options));\n};\nmetadataDecorator.validate = (value: any, obj: any, options: any) => {\n  return validateMetadata(value, options);\n};\nmetadataDecorator.toDocument = (updateQuery: UpdateQuery, key: string, value: any, operation: 'insert' | 'update' | 'upsert', options: any, element: any, target: any) => {\n  if (value === null || value === undefined || value === 'null') {\n    updateQuery.unset(key, '');\n  } else {\n    updateQuery.set(key, value);\n  }\n  return Promise.resolve();\n}\nexport const metadata = metadataDecorator.decorator();"]}