{"version":3,"file":"increment-by-app.js","sourceRoot":"","sources":["../../../src/decorators/types/increment-by-app.ts"],"names":[],"mappings":"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","sourcesContent":["import { Deco, datastore, StringNumberMap, UpdateQuery } from '../../';\nimport { TypeDecorator } from './type-decorator';\nlet debug = require('debug')('deco-api:decorators:types:increment-by-app');\n\nexport let incrementByAppDecorator = new TypeDecorator('increment-by-app');\nincrementByAppDecorator.requireDeco = true;\nexport let inputIncrementByApp = (value: any, options: any) => {\n  return undefined\n}\nincrementByAppDecorator.input = (key: string, value: any, options: any, target: any) => {\n  return Promise.resolve(inputIncrementByApp(value, options));\n};\nexport let validateIncrementByApp = async (value: any, options: any) => {\n  return true;\n};\nincrementByAppDecorator.validate = (value: any, obj: any, options: any) => {\n  return validateIncrementByApp(value, options);\n};\nlet counters: StringNumberMap = {};\nincrementByAppDecorator.toDocument = (updateQuery: UpdateQuery, key: string, value: any, operation: 'insert' | 'update' | 'upsert', options: any, element: any, target: any) => {\n  if (!options.deco) {\n    console.warn('Missing deco in increment decorator');\n    return Promise.resolve();\n  }\n  let deco: Deco = options.deco;\n  if (element[key]) {\n    updateQuery.set(key, value);\n    return Promise.resolve();\n  }\n  if (!element.appId) {\n    throw new Error('incrementByAppDecorator only works for elements with appId set');\n  }\n  let appIdString = '';\n  try {\n    appIdString = element.appId.toString();\n  } catch (error) {\n    throw new Error('incrementByAppDecorator: invalid appId');\n  }\n  let counterId = options.deco.collectionName + ':' + appIdString + ':' + key;\n  let counterMin = options.min || 1;\n\n  let counterPromise: Promise<Number>;\n  if (counters[counterId] && false) {\n    counters[counterId] = counters[counterId] + 1\n    counterPromise = Promise.resolve(counters[counterId]);\n    // At first we wanted to keep this memory counter\n    // and add a check on the counter value to make sure it doesn't exists\n    // but after working on this I realize it's best to always go through the checker below\n  } else {\n    let projection: any = {};\n    projection[key] = 1;\n    let sort: any = {};\n    sort[key] = -1;\n    counterPromise = datastore.db.collection(deco.collectionName).find({appId: element.appId}, {projection: projection, sort: sort, limit: 1}).toArray().then((result) => {\n      let value: number = counterMin;\n      if (result && result.length && result[0][key]) {\n        value = Math.max(counterMin, result[0][key]);\n      }\n      counters[counterId] = value + 1;\n      return counters[counterId];\n    });\n  }\n  return counterPromise.then((inc) => {\n    updateQuery.set(key, inc);\n  });\n}\nexport const incrementByApp = incrementByAppDecorator.decorator();"]}