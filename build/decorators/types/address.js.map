{"version":3,"file":"address.js","sourceRoot":"","sources":["../../../src/decorators/types/address.ts"],"names":[],"mappings":"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","sourcesContent":["import { TypeDecorator } from '../index'\nlet debug = require('debug')('app:decorators:address');\n\nexport let inputAddress = (value: any) => {\n  if (value === null || value === undefined) {\n    value = undefined;\n  }\n  return value;\n};\nexport let validateAddress = (value: any, options?: any) => {\n  if (value === undefined) return true;\n  if (typeof value !== 'object') return false;\n  let allowedKeys = ['label', 'street', 'city', 'zip', 'country'];\n  for (let key in value) {\n    if (allowedKeys.indexOf(key) === -1) return false;\n    if (typeof value[key] !== 'string') return false;\n  }\n  return true;\n};\nexport let addressDecorator = new TypeDecorator('address');\naddressDecorator.input = (key: string, value: any, options: any, element: any, target: any) => {\n  return Promise.resolve(inputAddress(value));\n};\naddressDecorator.output = (key: string, value: any, options: any, element: any, target: any) => {\n  return Promise.resolve(value);\n};\naddressDecorator.validate = (value: any, obj: any, options: any) => {\n  return validateAddress(value, options);\n};\nexport const address = addressDecorator.decorator();\n\nexport let inputAddressArray = (value: any) => {\n  if (value === null || value === undefined) {\n    value = [];\n  }\n  return value;\n};\n\nexport let validateAddressArray = (value: any, options?: any) => {\n  if (!Array.isArray(value)) return false;\n  for (let index in value) {\n    let v = value[index];\n    if (!validateAddress(v)) return false;\n  }\n  return true;\n};\n\nexport let addressArrayDecorator = new TypeDecorator('addressArray');\naddressArrayDecorator.input = (key: string, value: any, options: any, element: any, target: any) => {\n  return Promise.resolve(inputAddressArray(value));\n};\naddressArrayDecorator.output = (key: string, value: any, options: any, element: any, target: any) => {\n  return Promise.resolve(value);\n};\naddressArrayDecorator.validate = (value: any, obj: any, options: any) => {\n  return validateAddressArray(value, options);\n};\nexport const addressArray = addressArrayDecorator.decorator();\n\nexport interface Address {\n  label?: string;\n  street?: string;\n  city?: string;\n  zip?: string;\n  country?: string;\n}"]}