{"version":3,"file":"increment.js","sourceRoot":"","sources":["../../../src/decorators/types/increment.ts"],"names":[],"mappings":"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","sourcesContent":["import { Deco } from './../../interfaces/deco';\nimport { datastore } from './../../helpers/datastore';\nimport { StringNumberMap } from './../../interfaces/types';\nimport { UpdateQuery } from './../../helpers/update-query';\nimport { TypeDecorator } from './type-decorator';\nlet debug = require('debug')('deco-api:decorators:types:increment');\n\nexport let incrementDecorator = new TypeDecorator('increment');\nincrementDecorator.requireDeco = true;\nexport let inputIncrement = (value: any, options: any) => {\n  return undefined\n}\nincrementDecorator.input = (key: string, value: any, options: any, target: any) => {\n  return Promise.resolve(inputIncrement(value, options));\n};\nexport let validateIncrement = async (value: any, options: any) => {\n  return true;\n};\nincrementDecorator.validate = (value: any, obj: any, options: any) => {\n  return validateIncrement(value, options);\n};\nlet counters: StringNumberMap = {};\nincrementDecorator.toDocument = (updateQuery: UpdateQuery, key: string, value: any, operation: 'insert' | 'update' | 'upsert', options: any, element: any, target: any) => {\n  if (!options.deco) {\n    console.warn('Missing deco in increment decorator');\n    return Promise.resolve();\n  }\n  let deco: Deco = options.deco;\n  if (element[key]) return Promise.resolve();\n  let counterId = options.deco.collectionName + ':' + key;\n  let counterMin = options.min || 1;\n\n  let counterPromise: Promise<Number>;\n  if (counters[counterId]) {\n    counters[counterId] = counters[counterId] + 1\n    counterPromise = Promise.resolve(counters[counterId]);\n  } else {\n    let projection: any = {};\n    projection[key] = 1;\n    let sort: any = {};\n    sort[key] = -1;\n    counterPromise = datastore.db.collection(deco.collectionName).find({}, {projection: projection, sort: sort, limit: 1}).toArray().then((result) => {\n      let value: number = counterMin;\n      if (result && result.length && result[0][key]) {\n        value = Math.max(counterMin, result[0][key]);\n      }\n      counters[counterId] = value + 1;\n      return counters[counterId];\n    });\n  }\n  return counterPromise.then((inc) => {\n    updateQuery.set(key, inc);\n  });\n}\nexport const increment = incrementDecorator.decorator();"]}