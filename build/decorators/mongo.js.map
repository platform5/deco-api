{"version":3,"file":"mongo.js","sourceRoot":"","sources":["../../src/decorators/mongo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Deco } from './../interfaces/deco';\nimport { datastore } from './../helpers/datastore';\nimport { StringTMap } from '../interfaces';\nlet debug = require('debug')('deco-api:decorators:mongo-index');\n\ntype MongoIndexDirection = -1 | 1;\n\ninterface MongoIndexOptions {\n  type?: 'single' | 'compound' | '2dsphere';\n  direction?: -1 | 1;\n  compoundFields?: StringTMap<MongoIndexDirection>;\n  unique?: boolean;\n  sparse?: boolean;\n  partialFilterExpression?: any;\n  expireAfterSeconds?: number | undefined;\n}\n\ninterface MongoCollectionIndexOptions {\n  type: 'text';\n  properties?: Array<string>;\n}\n\nlet defaultOptions: MongoIndexOptions = {\n  type: 'single',\n  direction: 1,\n  compoundFields: {},\n  unique: false,\n  sparse: false,\n  partialFilterExpression: undefined,\n  expireAfterSeconds: undefined\n};\n\nlet index = (options: MongoIndexOptions = {}): any => {\n  options = Object.assign({}, defaultOptions, options);\n  \n  let deco = (target: any, key: string, descriptor?: PropertyDescriptor): void | any => {\n    if (descriptor) descriptor.writable = true;\n\n    datastore.isReady().then(() => {\n      if (target._deco) {\n        let deco: Deco = target._deco;\n        let indexData: any = {};\n        let indexOptions: any = {};\n        if (options.type === 'single') {\n          debug('Mongo index:', deco.collectionName, key, options.type, options.direction);\n          indexData[key] = options.direction;\n        } else if (options.type === 'compound') {\n          indexData = options.compoundFields;\n        } else if (options.type === '2dsphere') {\n          indexData[key] = '2dsphere';\n        } else if (options.type === 'text') {\n          indexData[key] = 'text';\n        }\n        if (options.unique) {\n          indexOptions.unique = true;\n        }\n        if (options.sparse) {\n          indexOptions.sparse = true;\n        }\n        if (options.partialFilterExpression) {\n          indexOptions.partialFilterExpression = options.partialFilterExpression;\n        }\n        if (options.expireAfterSeconds) {\n          indexOptions.expireAfterSeconds = options.expireAfterSeconds;\n        }\n        if (Object.keys(indexData).length) datastore.db.collection(deco.collectionName).createIndex(indexData, indexOptions);\n      }\n    });\n\n    if (descriptor) return descriptor;\n  };\n\n  return deco;\n}\n\nexport const collectionIndex = (options: MongoCollectionIndexOptions) => {\n  return function (target: any): void {\n    const deco: Deco = target.prototype._deco;\n    datastore.isReady().then(() => {\n      if (options.type === 'text' && Array.isArray(options.properties) && options.properties.length > 0) {\n        datastore.db.collection(deco.collectionName).listIndexes().toArray().then((indexes) => {\n          let deleteIndexPromise: Promise<any> = Promise.resolve();\n          for (let index of indexes) {\n            if (index.key && index.key._fts && index.key._fts === 'text') {\n              deleteIndexPromise = datastore.db.collection(deco.collectionName).dropIndex(index.name);\n            }\n          }\n          deleteIndexPromise.then(() => {\n            let indexData: any = {};\n            for (let prop of (options.properties as Array<string>)) {\n              indexData[prop] = 'text';\n            }\n            debug('Mongo text index:', deco.collectionName, options.properties);\n            datastore.db.collection(deco.collectionName).createIndex(indexData);\n          });\n        }).catch((error) => {\n          debug('Error when adding collectionIndex', options);\n          debug(' - Collection: ', deco.collectionName);\n          debug(' - Message: ', error.message);\n        });\n      }\n    });\n  }\n}\n\nexport { index, MongoIndexOptions };"]}